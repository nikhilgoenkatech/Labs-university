[{"id":"1","name":"Session Objectives","content":"<h2 id=\"sessionobjectives\">Session Objectives</h2>\n<p>During the session, we will attend the following objectives on the provided kubernetes cluster:</p>\n<ol>\n<li>Cluster wide instrumentation using the <strong>OneAgent Operator</strong>.</li>\n<li>Walkthrough different components in the Kubernetes Cluster-view.</li>\n<li>Deploying the <strong>Sample Bank</strong> app on the kubernetes cluster comprising of a node and MongoDB pod.</li>\n<li>Start a <strong>Prometheus server</strong> with node and MongoDB exporters to pull data from the sample-bank application.</li>\n<li>Configure exporters to push <strong>Prometheus data</strong> into Dynatrace.</li>\n<li>Walkthrough the benefits/use-cases of pushing the Prometheus data in Dynatrace.</li>\n<li>Setting up the Prometheus data on a dashboard and setting up alerts using <strong>Davis AI auto-detected baseline</strong> for the metrics.</li>\n</ol>\n<!-- ------------------------ -->","activityList":[]},{"id":"2","name":"Setting up Dynatrace on Kubernetes","content":"<h2 id=\"settingupdynatraceonkubernetes\">Setting up Dynatrace on Kubernetes</h2>\n<p>In this step, install the Dynatrace Operator on your Kubernetes cluster so that the OneAgent can report and collect metrics from different pods.</p>\n<p>Use PuTTy (Windows), PowerShell (Windows) or Terminal (Mac), ssh into the instance using the following credentials:\n<strong>Username</strong>: <code>d1prumworkshop</code>\n<strong>Password</strong>:  <code>dynatrace</code></p>\n<p>Alternatively, you can connect to the SSH terminal by clicking on the icon as below:\n<img src=\"./images/ssh_terminal_access.png\" alt=\"image-ssh-terminal\" /></p>\n<p>Further become root user by executing the below command:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-variable\">$ </span>sudo su\n</code></pre>\n<p>Note: Password for root is <strong>dynatrace</strong></p>\n<p>Let us install the Dynatrace Operator on your Kubernetes cluster so that the OneAgent can report and collect metrics from different pods. Dynatrace support multiple deployment strategies to install the Dynatrace Operator, for Kubernetes integration. In this tutorial, we will use the automated mode.</p>\n<pre><code class=\"hljs bash language-bash\">$ kubectl config view --raw &gt; /home/ubuntu/.kube/config\n\n$ kubectl config view --raw &gt; ~/.kube/config\n\n$ <span class=\"hljs-built_in\">export</span> CLUSTER_SERVER=$(microk8s config | grep <span class=\"hljs-string\">&quot;server:&quot;</span> | sed <span class=\"hljs-string\">&#x27;s/^.*server: //&#x27;</span>)\n\n$ kubectl config set-cluster microk8s-cluster --insecure-skip-tls-verify=<span class=\"hljs-literal\">true</span> --server=<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$CLUSTER_SERVER</span>&quot;</span>\n</code></pre>\n<p>Negative\n:If you come across the following error\n<img src=\"./images/kube.png\" alt=\"image\" /></p>\n<p>Please execute the following command to resolve the error</p>\n<pre><code class=\"hljs bash language-bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>\n\n$ mkdir .kube\n\n$ <span class=\"hljs-built_in\">cd</span> .kube\n\n$ microk8s config &gt; config\n\n$ <span class=\"hljs-built_in\">export</span> CLUSTER_SERVER=$(microk8s config | grep <span class=\"hljs-string\">&quot;server:&quot;</span> | sed <span class=\"hljs-string\">&#x27;s/^.*server: //&#x27;</span>)\n\n$ kubectl config set-cluster microk8s-cluster --insecure-skip-tls-verify=<span class=\"hljs-literal\">true</span> --server=<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$CLUSTER_SERVER</span>&quot;</span>\n</code></pre>\n<ol start=\"2\">\n<li><p>Within your tenant, navigate to <strong>Kubernetes</strong>\n<img src=\"./images/Kubernetes-instrumentation-1.png\" alt=\"Kubernetes-instrumentation-1\" /></p></li>\n<li><p>Select <strong>Connect automatically via Dynatrace Operator</strong>.\n<img src=\"./images/Kubernetes-instrumentation-2.png\" alt=\"Kubernetes-instrumentation-2\" /></p></li>\n<li><p>Enter the following details.</p></li>\n<li><p><strong>Name</strong>: Defines the display name of your Kubernetes cluster say <code>kubernetesintegration</code>. Additionally, this name will be used as a prefix for naming Dynatrace-specific resources inside the Kubernetes cluster, such as DynaKube (custom resource), ActiveGate (pod), OneAgents (pods), and as a name for the secret holding your tokens.</p></li>\n<li><p><strong>Dynatrace Operator token</strong>: Create token to have it automatically generated for the instrumentation.</p></li>\n<li><p>Lastly, toggle <strong>Skip SSL Certificate check</strong> to yes.\n<img src=\"./images/Kubernetes-instrumentation-3.png\" alt=\"Kubernetes-instrumentation-3\" /></p></li>\n<li><p>Under <strong>Kubernetes/OpenShift</strong>, select <strong>Download dynakube.yaml</strong>, create a file dynakube.yaml by running a command as follow:</p></li>\n</ol>\n<pre><code class=\"hljs\">$ cd <span class=\"hljs-regexp\">/home/u</span>buntu<span class=\"hljs-regexp\">/k8s/</span>\n\n$ vim dynakube.yaml\n</code></pre>\n<p>Further, copy the contents of dynakube.yaml and paste it in dynakube.yaml of your terminal (by pressing <code>i</code> to enter Insert mode, followed by <code>CTRL + Shift + V</code>) and exit the dynakube.yaml by pressing <code>ESC</code> key followed by <code>:wqa</code></p>\n<ol start=\"8\">\n<li>Lastly, copy the code block generated based on our inputs earlier and  run it in your terminal.\n<img src=\"./images/Kubernetes-instrumentation-4.png\" alt=\"Kubernetes-instrumentation-4\" /></li>\n</ol>\n<blockquote>\n  <p>Note:\n  Be sure to execute the commands in the same directory where you downloaded the YAML, or adapt the commands to link to the location of the YAML.</p>\n</blockquote>\n<p>This should enable the kubernetes intrumentation for your cluster. To view the integration, click on <strong>Show deployment status</strong>.</p>\n<!-- ------------------------ -->","activityList":[]},{"id":"3","name":"Start the Sample-Application","content":"<h2 id=\"startthesampleapplication\">Start the Sample-Application</h2>\n<p>Navigate to <code>/home/ubuntu/k8s</code> folder by using the following command:</p>\n<pre><code class=\"hljs\">$ cd <span class=\"hljs-regexp\">/home/u</span>buntu/k8s\n</code></pre>\n<p>In that folder you will be able to view the yaml files for front-end and mongodb deployment. In order to deploy the services and deployment, run the following commands:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-symbol\">$</span> kubectl create namespace <span class=\"hljs-keyword\">model</span>-app\n\n<span class=\"hljs-symbol\">$</span> kubectl apply -n <span class=\"hljs-keyword\">model</span>-app -f app-deployment.yaml\n\n<span class=\"hljs-symbol\">$</span> kubectl apply -n <span class=\"hljs-keyword\">model</span>-app -f mongo-deployment.yaml\n\n<span class=\"hljs-symbol\">$</span> kubectl apply -n <span class=\"hljs-keyword\">model</span>-app -f mongo-service.yaml\n\n<span class=\"hljs-symbol\">$</span> kubectl apply -n <span class=\"hljs-keyword\">model</span>-app -f app-service.yaml\n</code></pre>\n<p>This will create the deployment and services for all components for the application. Further, your service will now be accessible via NodePort.</p>\n<p>Verify the service is up and running as expected using command below.</p>\n<pre><code class=\"hljs\"><span class=\"hljs-symbol\">$</span> kubectl describe service <span class=\"hljs-keyword\">model</span>-app -n <span class=\"hljs-keyword\">model</span>-app\n</code></pre>\n<p><img src=\"./images/expose-model-app.png\" alt=\"image\" /></p>\n<p>Note down the Nodeport and connect to the application on browser using <strong>Instance-ip:NodePort</strong></p>\n<h3 id=\"troubleshootingsteps\">⚠️ Troubleshooting steps</h3>\n<ul>\n<li><p>To <strong>check status of pods</strong>, run command below. You should get a <strong>Running</strong> as a return.\n<code>$ kubectl get pods -n dynatrace</code></p></li>\n<li><p>To <strong>check the logs</strong>, run command below.\n<code>$ kubectl logs -f deployment/dynatrace-oneagent-operator -n dynatrace</code></p></li>\n<li><p>To <strong>delete secrets</strong>, run command below. You might have included a wrong secret previously.\n<code>$ kubectl delete secret --all -n dynatrace</code></p></li>\n<li><p>To <strong>delete all pods</strong>, run command below. This will cycle through the pods and you will have new pod instances.\n<code>$ kubectl delete --all pods -n dynatrace</code></p></li>\n<li><p>To <strong>check status of deployments</strong>, run command below. You should get a <strong>Running</strong> as a return.\n<code>$ kubectl get deployments -n dynatrace</code></p></li>\n<li><p>To <strong>check status of services</strong>, run command below. You should get a <strong>Running</strong> as a return.\n<code>$ kubectl get services -n dynatrace</code></p></li>\n<li><p>To <strong>delete a service</strong>, run command below.\n<code>$ kubectl delete service &lt;serviceName&gt; -n dynatrace</code></p></li>\n<li><p>If the pods are not running run <code>microk8s stop</code> and then <code>microk8s start</code> to restart the node.</p></li>\n<li><p>Official troubleshooting page could be found <a href=\"https://www.dynatrace.com/support/help/technology-support/cloud-platforms/google-cloud-platform/google-kubernetes-engine/installation-and-operation/full-stack/troubleshoot-oneagent-on-google-kubernetes-engine/\">here</a></p></li>\n</ul>\n<!-- ------------------------ -->","activityList":[]},{"id":"4","name":"Accessing the Application","content":"<h2 id=\"accessingtheapplication\">Accessing the Application</h2>\n<p>To access the application and register a user, navigate to <code>http://AWS-IP:{NodePort}/register</code> on the browser and insert the following details:</p>\n<ul>\n<li><strong>Name</strong>: Guest User</li>\n<li><strong>E-Mail Address</strong>: guestuser@mybank.com</li>\n<li><strong>Password</strong>: GuestUser12@</li>\n<li><strong>Name</strong>: 123456789</li>\n</ul>\n<p><img src=\"./images/register-user-app.png\" alt=\"image\" /></p>\n<p>Once you have completed registering yourself on the application, go to this link http://AWS-IP:NodePort/login and log into the application with the credentials below:</p>\n<p><strong>E-Mail Address</strong>: guestuser@mybank.com\n<strong>Password</strong>: GuestUser12@</p>\n<!-- ------------------------ -->","activityList":[]},{"id":"5","name":"Installing Prometheus and Enabling Exporters","content":"<h2 id=\"installingprometheusandenablingexporters\">Installing Prometheus and Enabling Exporters</h2>\n<p>In this step, you will be installing prometheus on the Kubernetes cluster so that it can monitor the application pods using node-exporter and mangodb-exporter.</p>\n<p>Navigate back to shell and execute the commands below:</p>\n<pre><code class=\"hljs bash language-bash\">$ sudo snap install helm --classic\n\n$ helm repo add prometheus-community https://prometheus-community.github.io/helm-charts\n\n$ helm repo update\n\n$ helm install prometheus-node-exporter prometheus-community/prometheus-node-exporter\n</code></pre>\n<p>Once executed, prometheus-node-exporter along with other prometheus pods would be installed in default namespace automatically on your kubernetes cluster.</p>\n<p><strong>Note</strong>: To view the installed pods, execute</p>\n<pre><code class=\"hljs\">$ kubectl <span class=\"hljs-builtin-name\">get</span> pods -n<span class=\"hljs-built_in\"> default\n</span></code></pre>\n<h3 id=\"annotatemongodbexporter\">Annotate mongodb-exporter</h3>\n<p>In this step, we will annotate the exporters to accept metrics on the annotated pods.</p>\n<p>Towards first step, navigate to <strong>Kubernetes</strong> menu within Dynatrace tenant, and against the kubernetes cluster <strong>prometheusintegration</strong> that you have setup in the first step, click (…) under \"Actions\" against the integration and select <strong>Settings</strong>.\n<img src=\"./images/step_1_prometheus_annotation.png\" alt=\"step-1\" /></p>\n<p>Further, toggle <strong>Monitor annotated Prometheus exporters</strong> and click on <strong>Save</strong>.\n<img src=\"./images/step_2_prometheus_annotation.png\" alt=\"step-2\" /></p>\n<p>Once saved, this concludes the setup required on tenant. The activeGate installed as part of the integration will now look for any annotated exporters and push the data in Dynatrace.</p>\n<p>Now, within SSH terminal we will annotate exporters to send data to Dynatrace. The first step will need you to have the Cluster-IP for the mongodb service so that it collects metrics from mongodb-exporter. To do so, run the following command within the SSH terminal:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-symbol\">$</span> kubectl describe service -n <span class=\"hljs-keyword\">model</span>-app mongo\n</code></pre>\n<p><img src=\"./images/clusterIP-mongodb.png\" alt=\"image\" /></p>\n<p><strong>Note</strong>: Keep the clusterIP handy in a notepad/location that you can refer to later as we will need this while setting up the mongodb-exporter.</p>\n<p>Now, let us create mongo-exporter that will collect mongodb metrics. To do so, run the mongodb-exporter pod in your kubernetes cluster by executing the command (after replacing cluster-ip in the command with the IP we identified earlier).</p>\n<pre><code class=\"hljs\">$ helm <span class=\"hljs-keyword\">install</span> prometheus-mongo prometheus-community/prometheus-mongodb-exporter --<span class=\"hljs-keyword\">set</span> mongodb.uri=mongodb://d1prumworkshop:password@clusterip:<span class=\"hljs-number\">27017</span>/?authSource=admin,serviceMonitor.enabled=<span class=\"hljs-keyword\">false</span> --<span class=\"hljs-keyword\">set</span>-<span class=\"hljs-keyword\">string</span> podAnnotations.<span class=\"hljs-string\">&quot;prometheus.io/scrape&quot;</span>=<span class=\"hljs-keyword\">true</span>  --<span class=\"hljs-keyword\">set</span>-<span class=\"hljs-keyword\">string</span> podAnnotations.<span class=\"hljs-string\">&quot;prometheus.io/port&quot;</span>=<span class=\"hljs-number\">9108</span> --namespace=model-app\n</code></pre>\n<p>Replace the <strong>cluster-ip</strong> with the IP listed from our earlier step before running the command.\n<img src=\"./images/mongodb-exporter.png\" alt=\"image\" /></p>\n<!-- ------------------------ -->","activityList":[]},{"id":"6","name":"Prometheus Metrics in Dynatrace","content":"<h2 id=\"prometheusmetricsindynatrace\">Prometheus Metrics in Dynatrace</h2>\n<p>In this step, we will annotate the pods to start pushing the prometheus metrics to Dynatrace.\nIdentify the mongodb-exporter name by running the following command:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-symbol\">$</span> kubectl get pods -n <span class=\"hljs-keyword\">model</span>-app\n</code></pre>\n<p><img src=\"./images/identify_mongo_exporter.png\" alt=\"image\" /></p>\n<p>Keep the exporter name handy in a notepad which you can refer to later. Further, annotate the mongodb-exporter or/and node-exporter so that oneagent running on the cluster push prometheus metrics to dynatrace tenant.</p>\n<p>Copy the mongodb-exporter pod name and annotate them using command below. <strong>Replace</strong> the mongodb-exporter string with the actual pod name.</p>\n<pre><code class=\"hljs bash language-bash\">$ kubectl annotate pod mongodb-exporter metrics.dynatrace.com/scrape=<span class=\"hljs-literal\">true</span> --namespace=model-app\n\n$ kubectl annotate pod mongodb-exporter metrics.dynatrace.com/port=9216 --namespace=model-app\n\n$ kubectl annotate pod mongodb-exporter metrics.dynatrace.com/secure=<span class=\"hljs-literal\">false</span> --namespace=model-app\n</code></pre>\n<p>Once annotated, the metrics will now be pushed to dynatrace too. To view these metrics, navigate to <strong>Metrics</strong> screen within Dynatrace tenant.\n<img src=\"./images/metrics_screen.png\" alt=\"image\" /></p>\n<p>By default, all the metrics collected by the annotated exporter(s) will be pushed to Dynatrace. However, you can limit the metrics by annotating the pod with filter key as below:</p>\n<pre><code class=\"hljs bash language-bash\">metrics.dynatrace.com/filter: |\n{\n<span class=\"hljs-string\">&quot;mode&quot;</span>: <span class=\"hljs-string\">&quot;include&quot;</span>,\n<span class=\"hljs-string\">&quot;names&quot;</span>: [\n<span class=\"hljs-string\">&quot;metrics-name-1&quot;</span>,\n<span class=\"hljs-string\">&quot;metrics-name-2&quot;</span>,\n<span class=\"hljs-string\">&quot;metrics-name...n&quot;</span>\n]\n}\n</code></pre>\n<blockquote>\n  <p>Positive\n  : Replace the metrics-name-1, metrics-name-2, etc with the appropriate name which will ascertain only the configured metrics are pushed through.</p>\n</blockquote>\n<p>Let us annotate our mongodb exporter pod to limit collection of say two metrics \"mongodb<em>network</em>metrics<em>num</em>requests<em>total, mongodb</em>asserts_total\". To do so, run the command as below:</p>\n<pre><code class=\"hljs bash language-bash\">$ kubectl edit pod &lt;pod_name&gt; -n model-app\n</code></pre>\n<p>Replace pod_name with the mongodb-exporter copied in the ealier steps. Further, add the below section in the manifest file:</p>\n<pre><code class=\"hljs bash language-bash\">metrics.dynatrace.com/filter: |\n{\n<span class=\"hljs-string\">&quot;mode&quot;</span>: <span class=\"hljs-string\">&quot;include&quot;</span>,\n<span class=\"hljs-string\">&quot;names&quot;</span>: [\n<span class=\"hljs-string\">&quot;mongodb_ss_network_numRequests&quot;</span>\n]\n}\n</code></pre>\n<p><img src=\"./images/filter-metrics.png\" alt=\"image\" /></p>\n<p>Once added, press ESC + :wq to quit the editor. The pod would now be annotated with the configured metrics and you will receive <strong>only</strong> these in Dynatrace,thereby, reducing your DDU consumption.</p>\n<ul>\n<li><strong>Note</strong>: mode supports both <strong>include</strong> and <strong>exclude</strong> keyword. Also, the names accept wild card like (<em>mongo) or (mongo</em>) or (<em>mongo</em>) should you have multiple metrics with similar text pattern.</li>\n</ul>\n<!-- ------------------------ -->","activityList":[]},{"id":"7","name":"Why push the metrics in Dynatrace?","content":"<h2 id=\"whypushthemetricsindynatrace\">Why push the metrics in Dynatrace?</h2>\n<p>In this step, we will walk through the automatic baseline and uses of pushing prometheus metrics into Dynatrace. We will setup a synthetic browser in order to populate automatic baseline.</p>\n<p>Once the metrics are being pushed in Dynatrace, the DAVIS AI engine will start digesting the information and identifying the baseline for the metrics. You can setup custom alerts (with auto-detective baseline) so that you don’t just get alerts but smart alerts.</p>\n<h3 id=\"populatebaselineusingsyntheticmonitors\">Populate Baseline using Synthetic Monitors</h3>\n<p>Dynatrace uses real-time traffic to generate a baseline for the pivotal parameters like response-time, error-rate, throughput and etc for the service or application. So, in order to generate some traffic, we will setup the HTTP monitor which would result DAVIS to generate a baseline.</p>\n<p>In your Dynatrace tenant, navigate to \"Synthetic\" and click on \"Create synthetic monitor\". Further, click on \"Create an HTTP monitor\"</p>\n<p><img src=\"./images/create-http-monitor.png\" alt=\"image\" /></p>\n<p>Follow these steps to configure the monitor:</p>\n<ol>\n<li>Name this HTTP monitor: Prometheus-setup-1</li>\n<li>Click “Add HTTP request”</li>\n<li>Request type: HTTP request</li>\n<li>HTTP Request URL: AWS-IP:30005/login - Replace the AWS-IP with your machine IP</li>\n<li>Name: Sample-app</li>\n<li>Click on “Add HTTP request”</li>\n</ol>\n<p><img src=\"./images/create-http-monitor-2.png\" alt=\"image\" /></p>\n<p>HTTP monitors can be scheduled to run from Dynatrace's private synthetic location and scheduled to run in configurable time intervals. For this setup, configure the HTTP monitor to run every <strong>1 minute</strong> from any <strong>two</strong> available locations.</p>\n<p><img src=\"./images/create-http-monitor-3.png\" alt=\"image\" /></p>\n<ul>\n<li><strong>Note</strong>: Currently, Mumbai is the synthetic monitors location that is whitelisted for your AWS instance. So, select <strong>Mumbai</strong> as your synthetic location.</li>\n</ul>\n<p>Once configured, Dynatrace will fire the HTTPS-requests on the service, which will generate traffic. To view the generated requests, navigate to <strong>Transactions & Services > node-bank</strong> service. The traffic will be used by DAVIS to determine the baseline of the service or the requests.</p>\n<!-- ------------------------ -->","activityList":[]},{"id":"8","name":"Setup Custom Alerts (With Auto-Detective baseline)","content":"<h2 id=\"setupcustomalertswithautodetectivebaseline\">Setup Custom Alerts (With Auto-Detective baseline)</h2>\n<p>In this step, we will setup a custom-alert to alert us when the automatic baseline has been breached for the Prometheus metric(s)</p>\n<p>Setup a custom alert with an auto-detective baseline so that the AI engine would determine the threshold after studying the trend and behaviour of the metrics. To setup a custom alert</p>\n<p><img src=\"./images/createCustom-event-1.png\" alt=\"image\" /></p>\n<p>All the metrics which were pushed into Dynatrace are now available in the metrics drop-down menu. Select the metrics that you would like to set a custom event for. In this case we will be using\n<code>mongodb_ss_network_numRequests</code>.</p>\n<p><img src=\"./images/createCustom-event-2.png\" alt=\"image\" /></p>\n<p>Further, scroll down to <strong>Monitoring strategy</strong> and configure the following:</p>\n<ol>\n<li>Alert-type: <strong>Auto-adaptive baseline</strong></li>\n<li>Configure to be alerted if the metric is <strong>above</strong> the baseline for <strong>1 minutes</strong> during <strong>3 minutes</strong> window</li>\n<li>Select <strong>Alert</strong> to ensure you are notified if data is missing.\n<img src=\"./images/createCustom-event-3.png\" alt=\"image\" /></li>\n<li>Name the title <strong>Prometheus-custom-alert</strong></li>\n<li>Click on <strong>Create custom event for alerting</strong>\n<img src=\"./images/createCustom-event-4.png\" alt=\"image\" /></li>\n</ol>\n<ul>\n<li><strong>Note</strong>: Dynatrace would indicate the number of alerts you would have received as per the baseline and the configuration under <strong>Alert Preview</strong> section so that you can fine-tune the settings in order to avoid alert storm.</li>\n</ul>\n<!-- ------------------------ -->","activityList":[]},{"id":"9","name":"Trigger an alert","content":"<h2 id=\"triggeranalert\">Trigger an alert</h2>\n<p>In this step, let us simulate load by executing a load-script so that the automatic threshold is breached, thereby, triggering an alert.</p>\n<p>Navigate back to your EC2 instance command line and change the directory to <code>/home/ubuntu/k8s</code>. You will find the file named <strong>simulate-alert.py</strong>.</p>\n<p>Run the file as displayed below:</p>\n<pre><code class=\"hljs\">$ <span class=\"hljs-keyword\">python3</span>.<span class=\"hljs-number\">8</span> simulate-alert.<span class=\"hljs-keyword\">py</span> AWS-IP port-<span class=\"hljs-keyword\">number</span>\n</code></pre>\n<ul>\n<li><strong>Note</strong>: To run this file you will need to replace the AWS-IP with your public-IP and replace the port-number with the NodePort where the application is listening.</li>\n</ul>\n<p>Once the script is executed, it would fire multiple requests parallely on the application. This will trigger an alert similar to the below:</p>\n<p><img src=\"./images/alert1.png\" alt=\"image\" /></p>","activityList":[]}]