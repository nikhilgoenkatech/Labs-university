[{"id":"1","name":"Session Objectives","content":"<h2 id=\"sessionobjectives\">Session Objectives</h2>\n<p>During the session, we will be creating custom device via using Activegate extension for Python and will attend the following objectives,</p>\n<ol>\n<li>Installing <strong>Activegate</strong>.</li>\n<li>Installing <strong>Plugin SDK</strong>.</li>\n<li>Demo of Activegate plugin.</li>\n<li>Writing own Activegate extension plugin.</li>\n<li>Uploading the Plugin in our tenant.</li>\n</ol>\n<p>:bulb: As a prerequisites, we will also need Python 3.6 installed in our server. For this session, it is already installed in our respective instances.</p>\n<p>Negative\n: Use PuTTy (Windows), PowerShell (Windows) or Terminal (Mac), ssh into the instance (IP address using the your PEM Key)</p>\n<p>Connect to the EC2 instance using the following credentials:\n<strong>Username</strong>: dynatrace\n<strong>Password</strong>: dynatrace</p>\n<p>Now, gain root access by performing <code>sudo su</code>\n<em>Hint: Password for root is also dynatrace</em></p>\n<h3 id=\"activegateinstallation\">Activegate Installation</h3>\n<ol>\n<li>Within Dynatrace tenant, please navigate to <strong>Deploy Dynatrace</strong></li>\n</ol>\n<p><img src=\"assets/deploy-dynatrace.png\" alt=\"deploy-dynatrace\" /></p>\n<ol start=\"2\">\n<li>Please scroll down on that screen and click on <strong>Install ActiveGate</strong></li>\n</ol>\n<p><img src=\"assets/install-activegate.png\" alt=\"install-activegate\" /></p>\n<ol start=\"3\">\n<li>Click on <strong>Linux</strong>.</li>\n</ol>\n<p><img src=\"assets/AG-linux.png\" alt=\"Linux Install\" /></p>\n<ol start=\"4\">\n<li>Generate a Paas token by clicking on \"Create token\", or we can use our previously saved token if we have any.</li>\n</ol>\n<p><img src=\"assets/Paastoken1.png\" alt=\"PaasToken\" /></p>\n<ol start=\"5\">\n<li><strong>Copy</strong> the command provided in the \"Download the installer using this command on the target host\" text field. <strong>Paste</strong> the command into your terminal window and execute it.</li>\n</ol>\n<p><img src=\"assets/Install2.png\" alt=\"Install2\" />\n(Optional) Once the download is complete, you can verify the signature by copying the command from the <em>\"Verify signature\"</em> text field, then pasting the command into your terminal window and executing it. Make sure your system is up to date, especially SSL and related certificate libraries.</p>\n<ol start=\"6\">\n<li><strong>Copy</strong> the command from \"Run the installer with root rights\" text field.</li>\n</ol>\n<p><img src=\"assets/Install3.png\" alt=\"Install3\" /></p>\n<h3 id=\"pluginsdkinstallation\">Plugin SDK Installation</h3>\n<ol>\n<li>Within Dynatrace tenant, please click on <strong>Settings</strong></li>\n</ol>\n<p><img src=\"assets/settings.png\" alt=\"settings\" /></p>\n<ol start=\"2\">\n<li>In <strong>Settings > Monitoring > Monitored technologies</strong>, please click on <strong>Add new technology monitoring</strong></li>\n</ol>\n<p><img src=\"assets/monitoring.png\" alt=\"monitoring\" /></p>\n<ol start=\"3\">\n<li>Choose <strong>Add ActiveGate extension</strong></li>\n</ol>\n<p><img src=\"assets/add-extension.png\" alt=\"add-extension\" /></p>\n<ol start=\"4\">\n<li>Click on <strong>Download the Extension SDK</strong></li>\n</ol>\n<p><img src=\"assets/download-sdk.png\" alt=\"download-sdk\" /></p>\n<ol start=\"5\">\n<li><p>Since the SDK is shipped as a ZIP archive, we will have to extract the files</p></li>\n<li><p>We can use WinSCP, FileZilla or any other program to copy the <code>.zip</code> folder to our instance.</p></li>\n\n<li><p>Please use command below to get into the folder and install the SDK wheel package. To do this you can use pip3. Here is an example, <strong>make sure you use your own version number</strong>:</p></li>\n</ol>\n<pre><code class=\"hljs\"><span class=\"hljs-variable\">$</span> <span class=\"hljs-built_in\">cd</span> plugin<span class=\"hljs-literal\">-sdk</span>-<span class=\"hljs-string\">&quot;YOUR VERSION&quot;</span>\n<span class=\"hljs-variable\">$</span> pip3 install plugin_sdk-<span class=\"hljs-string\">&quot;YOUR VERSION&quot;</span><span class=\"hljs-literal\">-py3</span><span class=\"hljs-literal\">-none</span><span class=\"hljs-literal\">-any</span>.whl\n<span class=\"hljs-variable\">$</span> plugin_sdk\n</code></pre>\n<p>We can run <code>plugin_sdk</code> to verify the installation was successful</p>\n<h3 id=\"demoactivegateplugin\">Demo ActiveGate Plugin</h3>\n<p>In this step, we will have a look at the demo activeGate extesion before we write our own extension.\nNavigate to <strong>activeGateExtension</strong> folder by running\n<code>$ cd /home/ubuntu/extendDynatrace/activeGateExtension</code></p>\n<p>Under activeGateExtension folder, there are two files that are critical to functioning of an extension. These are as follows:</p>\n<ol>\n<li>Python file named <strong>demo<em>activegate</em>plugin_multi.py</strong></li>\n<li>Configuration file named <strong>demo.json</strong></li>\n</ol>\n<h4 id=\"deepdivethecomponents\">Deep-dive the components:</h4>\n<ol>\n<li><strong>demo<em>activegate</em>plugin_multi.py</strong>\nThe python file contains the class definition and the methods that are required for working of the extension.</li>\n</ol>\n<pre><code class=\"hljs\">class RemoteExamplePlugin(RemoteBasePlugin):\n\ndef initialize(<span class=\"hljs-built_in\">self</span>, **kwargs):\n<span class=\"hljs-built_in\">self</span>.url = <span class=\"hljs-built_in\">self</span>.<span class=\"hljs-built_in\">config</span>.get(<span class=\"hljs-string\">&quot;url&quot;</span>, <span class=\"hljs-string\">&quot;http://127.0.0.1:8976&quot;</span>)\n<span class=\"hljs-built_in\">self</span>.user = <span class=\"hljs-built_in\">self</span>.<span class=\"hljs-built_in\">config</span>.get(<span class=\"hljs-string\">&quot;auth_user&quot;</span>, <span class=\"hljs-string\">&quot;admin&quot;</span>)\n<span class=\"hljs-built_in\">self</span>.password = <span class=\"hljs-built_in\">self</span>.<span class=\"hljs-built_in\">config</span>.get(<span class=\"hljs-string\">&quot;auth_password&quot;</span>, <span class=\"hljs-string\">&quot;admin&quot;</span>)\n<span class=\"hljs-built_in\">self</span>.alert_interval = <span class=\"hljs-built_in\">self</span>.<span class=\"hljs-built_in\">config</span>.get(<span class=\"hljs-string\">&quot;alert_interval&quot;</span>, <span class=\"hljs-number\">10</span>)\n<span class=\"hljs-built_in\">self</span>.event_interval = <span class=\"hljs-built_in\">self</span>.<span class=\"hljs-built_in\">config</span>.get(<span class=\"hljs-string\">&quot;event_interval&quot;</span>, <span class=\"hljs-number\">3</span>)\n<span class=\"hljs-built_in\">self</span>.relative_interval = <span class=\"hljs-built_in\">self</span>.<span class=\"hljs-built_in\">config</span>.get(<span class=\"hljs-string\">&quot;relative_interval&quot;</span>, <span class=\"hljs-number\">60</span>)\n<span class=\"hljs-built_in\">self</span>.state_interval = <span class=\"hljs-built_in\">self</span>.<span class=\"hljs-built_in\">config</span>.get(<span class=\"hljs-string\">&quot;state_interval&quot;</span>, <span class=\"hljs-number\">60</span>)\n\n<span class=\"hljs-built_in\">self</span>.alert_iterations = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-built_in\">self</span>.event_iterations = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-built_in\">self</span>.relative_iterations = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-built_in\">self</span>.absolute_iterations = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-built_in\">self</span>.state_iterations = <span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-built_in\">self</span>.current_entries = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-built_in\">self</span>.archived_entries = <span class=\"hljs-number\">0</span>\n</code></pre>\n<p><strong>Query method</strong>\nThis can be termed as the section that contains the method to collect the data and populate it on Dynatrace. So, broadly query method can be classified into two main parts:\nI. <strong>Entity Details</strong>:\nThe device name/details where the pulled metrics will be reported in Dynatrace</p>\n<pre><code class=\"hljs\">group_name = self.get<span class=\"hljs-constructor\">_group_name()</span>\ntopology_group = self.topology_builder.create<span class=\"hljs-constructor\">_group(<span class=\"hljs-params\">group_name</span>, <span class=\"hljs-params\">group_name</span>)</span>\ntopology_group.per<span class=\"hljs-constructor\">_second(<span class=\"hljs-string\">&quot;service.querries_per_second&quot;</span>, <span class=\"hljs-params\">self</span>.<span class=\"hljs-params\">get_num_querries</span>()</span>)\ntopology_group.report<span class=\"hljs-constructor\">_property(<span class=\"hljs-params\">key</span>=<span class=\"hljs-string\">&quot;group_property&quot;</span>, <span class=\"hljs-params\">value</span>=<span class=\"hljs-string\">&quot;group_property_value&quot;</span>)</span>\ndevices = self.get<span class=\"hljs-constructor\">_device_names()</span>\nport = <span class=\"hljs-number\">80</span>\n<span class=\"hljs-keyword\">for</span> device_name <span class=\"hljs-keyword\">in</span> devices:\ntopology_device = topology_group.create<span class=\"hljs-constructor\">_device(<span class=\"hljs-params\">device_name</span>, <span class=\"hljs-params\">device_name</span>)</span>\n</code></pre>\n<p>II. <strong>Metrics Endpoint</strong>:\nThe HTTP endpoint from where the metrics will be fetched and reported to the entity defined in Dynatrace.</p>\n<pre><code class=\"hljs\">topology_device<span class=\"hljs-selector-class\">.absolute</span>(<span class=\"hljs-string\">&quot;databases.total_num_entities&quot;</span>, self<span class=\"hljs-selector-class\">.get_device_entries</span>())\ntopology_device<span class=\"hljs-selector-class\">.relative</span>(<span class=\"hljs-string\">&quot;databases.replicated_entries&quot;</span>, self<span class=\"hljs-selector-class\">.get_archived_entries</span>())\n<span class=\"hljs-keyword\">for</span> <span class=\"hljs-selector-tag\">table</span> <span class=\"hljs-keyword\">in</span> self<span class=\"hljs-selector-class\">.get_tables_for_device</span>(device_name):\ntopology_device<span class=\"hljs-selector-class\">.absolute</span>(<span class=\"hljs-string\">&quot;databases.table_size&quot;</span>, table_size, {<span class=\"hljs-string\">&quot;table_name&quot;</span>: table})\ntable_size = table_size + <span class=\"hljs-number\">100</span>\n<span class=\"hljs-keyword\">if</span> self<span class=\"hljs-selector-class\">.should_create_event</span>():\ntopology_device<span class=\"hljs-selector-class\">.report_custom_info_event</span>(<span class=\"hljs-string\">&quot;Custom event!&quot;</span>)\ntopology_device<span class=\"hljs-selector-class\">.report_performance_event</span>(<span class=\"hljs-string\">&quot;Performance problem description&quot;</span>, <span class=\"hljs-string\">&quot;Performance problem&quot;</span>, {})\ntopology_device<span class=\"hljs-selector-class\">.report_property</span>(key=<span class=\"hljs-string\">&quot;device_property&quot;</span>, value=<span class=\"hljs-string\">&quot;device_property_value&quot;</span>)\ntopology_device<span class=\"hljs-selector-class\">.add_endpoint</span>(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>, port)\nport += <span class=\"hljs-number\">1</span>\n</code></pre>\n<ol start=\"2\">\n<li><strong>Configuration file \"demo.json\"</strong>\nThe JSON file contains the following components\n2.1. <strong>Metadata</strong>\nThe metadata contains a list of properties used to identify your extension.\n2.2 <strong>Metrics</strong>\nThe metrics section describes the data gathered by the extension. This section provides two metrics that mirror both what our demo application serves, and what the Python code collects.\n2.3 <strong>configUI</strong>\nConfigUI and the properties sections define the user interface elements used for extension configuration that will be available on Dynatrace UI.\n2.4 <strong>UI</strong>\nThe UI section will contain details on how the collected metrics would be displayed on UI.</li>\n</ol>\n<h3 id=\"buildyourownextension\">Build your own extension</h3>\n<p>In this step, we will build our own extension. As an use-case, we will build an extension to pull host units using Dynatrace-v1 infrastructure API and have it reported on the UI.</p>\n<h4 id=\"jsonfile\">JSON file</h4>\n<p>First let us create a new folder which will host our JSON and python file. To do so, run the commands as below:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-variable\">$</span> <span class=\"hljs-built_in\">cd</span> /home/ubuntu/\n<span class=\"hljs-variable\">$</span> mkdir my_extension\n<span class=\"hljs-variable\">$</span> <span class=\"hljs-built_in\">cd</span> my_extension\n</code></pre>\n<p>Now let us proceed to write our JSON file say <strong>plugin.json</strong>. The file will contain the properties and metrics that we intend to collect using the extension. Open the file using your favorite editor and define the sections as below:</p>\n<p><strong>The Metadata, Metrics, UI and configUI sections all make up the one JSON file, this file will also be provided at the end of the last section</strong></p>\n<ol>\n<li><strong>Metadata:</strong>\nMetadata section in the JSON file would constitute the name of our extension along with other details like className (that would be defined later in the python file) and any python libraries that you will need to install in order for the extension to work.</li>\n</ol>\n<pre><code class=\"hljs\">{\n<span class=\"hljs-attr\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;custom.remote.python.hostunits&quot;</span>,\n<span class=\"hljs-attr\">&quot;version&quot;</span>: <span class=\"hljs-string\">&quot;154.5&quot;</span>,\n<span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;python&quot;</span>,\n<span class=\"hljs-attr\">&quot;entity&quot;</span>: <span class=\"hljs-string\">&quot;CUSTOM_DEVICE&quot;</span>,\n<span class=\"hljs-attr\">&quot;metricGroup&quot;</span>: <span class=\"hljs-string\">&quot;tech.Demo_Technology.HostUnits&quot;</span>,\n<span class=\"hljs-attr\">&quot;processTypeNames&quot;</span>: [<span class=\"hljs-string\">&quot;PYTHON&quot;</span>],\n<span class=\"hljs-attr\">&quot;technologies&quot;</span>: [<span class=\"hljs-string\">&quot;Custom technology&quot;</span>],\n<span class=\"hljs-attr\">&quot;favicon&quot;</span>: <span class=\"hljs-string\">&quot;https://lh3.googleusercontent.com/gN6iBKP1b2GTXZZoCxhyXiYIAh8QJ_8xzlhEK6csyDadA4GdkEdIEy9Bc8s5jozt1g=w300&quot;</span>,\n<span class=\"hljs-attr\">&quot;source&quot;</span>: {\n<span class=\"hljs-attr\">&quot;package&quot;</span>: <span class=\"hljs-string\">&quot;demo_custom_device&quot;</span>,\n<span class=\"hljs-attr\">&quot;className&quot;</span>: <span class=\"hljs-string\">&quot;DemoCustomDevice&quot;</span>,\n<span class=\"hljs-attr\">&quot;install_requires&quot;</span>: [<span class=\"hljs-string\">&quot;requests&gt;=2.6.0&quot;</span>],\n<span class=\"hljs-attr\">&quot;activation&quot;</span>: <span class=\"hljs-string\">&quot;Remote&quot;</span>\n},\n</code></pre>\n<ol start=\"2\">\n<li><strong>Metrics:</strong>\nWe intend to collect host-units using the extension, so our metrics section would contain a single metrics say <strong>hostUnits</strong>. As the host units are reported as integer in Dynatrace, hostUnits for our extension should be of type <em>Count</em>. So, our metrics section would look like below:</li>\n</ol>\n<pre><code class=\"hljs\"><span class=\"hljs-string\">&quot;metrics&quot;</span>: [{\n<span class=\"hljs-string\">&quot;entity&quot;</span>: <span class=\"hljs-string\">&quot;CUSTOM_DEVICE&quot;</span>,\n<span class=\"hljs-string\">&quot;timeseries&quot;</span>: {\n<span class=\"hljs-string\">&quot;key&quot;</span>: <span class=\"hljs-string\">&quot;hostUnits&quot;</span>,\n<span class=\"hljs-string\">&quot;unit&quot;</span>: <span class=\"hljs-string\">&quot;Count&quot;</span>,\n<span class=\"hljs-string\">&quot;displayname&quot;</span>: <span class=\"hljs-string\">&quot;Consumed Host Units&quot;</span>\n}\n}\n],\n</code></pre>\n<ol start=\"3\">\n<li><strong>UI:</strong>\nui section contains detail of how the metrics should be displayed on Dynatrace UI once collected. In our case, let us display the metrics as <em>Currently Used Host Units</em> and have it reported as <em>line</em>. So, our ui section would look similar to below:</li>\n</ol>\n<pre><code class=\"hljs\"><span class=\"hljs-string\">&quot;ui&quot;</span>:\n{\n<span class=\"hljs-string\">&quot;keymetrics&quot;</span>: [{\n<span class=\"hljs-string\">&quot;key&quot;</span>: <span class=\"hljs-string\">&quot;hostUnits&quot;</span>,\n<span class=\"hljs-string\">&quot;aggregation&quot;</span>: <span class=\"hljs-string\">&quot;COUNT&quot;</span>,\n<span class=\"hljs-string\">&quot;displayname&quot;</span>: <span class=\"hljs-string\">&quot;Currently Used Host Units&quot;</span>\n}\n],\n<span class=\"hljs-string\">&quot;keycharts&quot;</span>: [{\n<span class=\"hljs-string\">&quot;group&quot;</span>: <span class=\"hljs-string\">&quot;Hosts&quot;</span>,\n<span class=\"hljs-string\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;HostUnits&quot;</span>,\n<span class=\"hljs-string\">&quot;description&quot;</span>: <span class=\"hljs-string\">&quot;Consumed Host Units&quot;</span>,\n<span class=\"hljs-string\">&quot;explanation&quot;</span>: <span class=\"hljs-string\">&quot;Consumed Host Units&quot;</span>,\n<span class=\"hljs-string\">&quot;series&quot;</span>: [{\n<span class=\"hljs-string\">&quot;key&quot;</span>: <span class=\"hljs-string\">&quot;hostUnits&quot;</span>,\n<span class=\"hljs-string\">&quot;displayname&quot;</span>: <span class=\"hljs-string\">&quot;Host Units&quot;</span>,\n<span class=\"hljs-string\">&quot;color&quot;</span>: <span class=\"hljs-string\">&quot;#00a6fb&quot;</span>,\n<span class=\"hljs-string\">&quot;seriestype&quot;</span>: <span class=\"hljs-string\">&quot;line&quot;</span>,\n<span class=\"hljs-string\">&quot;rightaxis&quot;</span>: false,\n<span class=\"hljs-string\">&quot;stacked&quot;</span>: false,\n<span class=\"hljs-string\">&quot;unit&quot;</span>: <span class=\"hljs-string\">&quot;Count&quot;</span>,\n<span class=\"hljs-string\">&quot;metricexplanation&quot;</span>: <span class=\"hljs-string\">&quot;Not used&quot;</span>\n}\n]\n}]\n}\n</code></pre>\n<ol start=\"4\">\n<li><strong>configUI</strong>\nThe last section configUI would contain details of the configuration that your extension will accept from end-user. In our case, as we are making API calls to Dynatrace, we will need the Dynatrace end-point details - let us call it say <strong>URL</strong>.</li>\n</ol>\n<p>Additionally, we will need API-token that will be used to fetch the values - let us call it <strong>apiToken</strong>.Please follow the instructions below to generate Dynatrace API-Token,</p>\n<ol>\n<li>Within Dynatrace tenant, please navigate to <strong>Access tokens</strong>,</li>\n</ol>\n<p><img src=\"assets/access-tokens.png\" alt=\"access-tokens\" /></p>\n<ol start=\"2\">\n<li>Click on <strong>Generate new token</strong>,</li>\n</ol>\n<p><img src=\"assets/generate-new-token.png\" alt=\"generate-new-token\" /></p>\n<ol start=\"3\">\n<li>Please enter a Token name and then search for <strong>Access problem</strong> to find the right API v1 permissions. Click <strong>Generate token</strong>.</li>\n</ol>\n<p><img src=\"assets/token-one.png\" alt=\"token-one\" /></p>\n<ol start=\"4\">\n<li>We can now copy the token and store it somewhere secure, as this token is generated only once,</li>\n</ol>\n<p><img src=\"assets/token-two.png\" alt=\"token-two\" /></p>\n<p>:bulb: With this token, we can now access the Dynatrace API and get all sorts of information about our environment.</p>\n<p>So, our configUI would look similar to below:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-string\">&quot;properties&quot;</span>: [{\n<span class=\"hljs-string\">&quot;key&quot;</span>: <span class=\"hljs-string\">&quot;url&quot;</span>,\n<span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;String&quot;</span>\n},\n{\n<span class=\"hljs-string\">&quot;key&quot;</span>: <span class=\"hljs-string\">&quot;apiToken&quot;</span>,\n<span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;password&quot;</span>\n}\n],\n\n<span class=\"hljs-string\">&quot;configUI&quot;</span>: {\n<span class=\"hljs-string\">&quot;displayName&quot;</span>: <span class=\"hljs-string\">&quot;Custom Device - HostUnits&quot;</span>,\n<span class=\"hljs-string\">&quot;properties&quot;</span>: [\n{\n<span class=\"hljs-string\">&quot;key&quot;</span>: <span class=\"hljs-string\">&quot;url&quot;</span>,\n<span class=\"hljs-string\">&quot;displayName&quot;</span>: <span class=\"hljs-string\">&quot;URL&quot;</span>,\n<span class=\"hljs-string\">&quot;displayHint&quot;</span>: <span class=\"hljs-string\">&quot;https://{your-tenant-id}.dynatracelabs.com&quot;</span>\n},\n{\n<span class=\"hljs-string\">&quot;key&quot;</span>: <span class=\"hljs-string\">&quot;apiToken&quot;</span>,\n<span class=\"hljs-string\">&quot;displayName&quot;</span>: <span class=\"hljs-string\">&quot;apiToken&quot;</span>,\n<span class=\"hljs-string\">&quot;displayHint&quot;</span>: <span class=\"hljs-string\">&quot;API Token value that will be used to gather data&quot;</span>\n}\n]\n}\n}\n</code></pre>\n<p>Save the plugin.json.</p>\n<p><a href=\"https:/images/plugin.json\">Download plugin.json</a></p>\n<p>We will now move to writing the python file.</p>\n<h4 id=\"pythonfile\">Python file</h4>\n<p>Create the python file with class and method definition that will populate and publish the data on our extension. As we have specified DemoCustomDevice as our class name in the source section of metadata, make sure that you define the class as <em>DemoCustomDevice</em>.</p>\n<p><strong>API/Endpoint Details</strong>\nBefore we jump on implementing the method, let us gather our requirements and expore the API (HTTP-endpoint) that will help to pull data. We will leverage 'api/v1/entity/infrastructure/hosts?includeDetails=true' API, so that is the HTTP-endpoint in this use-case.</p>\n<pre><code class=\"hljs\">curl -X <span class=\"hljs-builtin-name\">GET</span> <span class=\"hljs-string\">&quot;https://{your-tenant-id}.dynatracelabs.com/api/v1/entity/infrastructure/hosts?includeDetails=true&quot;</span> -H <span class=\"hljs-string\">&quot;accept: application/json; charset=utf-8&quot;</span> -H <span class=\"hljs-string\">&quot;Authorization: Api-Token {token}&quot;</span>\n</code></pre>\n<p><strong>The Entity Details and Metrics Endpoint section all make the same python file, this completed file will also be provided at the end.</strong></p>\n<p>I. <strong>Entity Details</strong>\nConsidering the above, our entity details section will have the URL/tenant-details where we can fetch data from (let us initialize it in a variable as <em>url</em>) along with API endpoint (let us call it as <em>dynatraceurl</em>) along with token required to fetch and publish the data - let us call it <em>apiToken</em>. With all this required, our initialize function would look like below:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">import</span> requests\n<span class=\"hljs-keyword\">from</span> ruxit.api.base_plugin <span class=\"hljs-keyword\">import</span> RemoteBasePlugin\n<span class=\"hljs-keyword\">import</span> json\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DemoCustomDevice</span>(<span class=\"hljs-params\">RemoteBasePlugin</span>):</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">initialize</span>(<span class=\"hljs-params\">self, **kwargs</span>):</span>\nself.url = self.config[<span class=\"hljs-string\">&quot;url&quot;</span>]\nself.apiToken = self.config[<span class=\"hljs-string\">&quot;apiToken&quot;</span>]\nself.dynatraceURL = self.url +                     <span class=\"hljs-string\">&quot;/api/v1/entity/infrastructure/hosts?includeDetails=true&quot;</span>\nself.headers = {\n<span class=\"hljs-string\">&#x27;Accept&#x27;</span>: <span class=\"hljs-string\">&#x27;application/json; charset=utf-8&#x27;</span>,\n<span class=\"hljs-string\">&#x27;Authorization&#x27;</span>:<span class=\"hljs-string\">&#x27;Api-Token &#x27;</span> + self.apiToken\n}\n</code></pre>\n<p>II. <strong>Metrics Endpoint:</strong>\nLet us define the second method in the python file, say <strong>query</strong> that will contain the logic to pull and publish the data in the extension. In the first part of the method, create a group and device using <em>create_group</em> and <em>create device</em> library functions. Further, collect the metric and report to dynatrace. So, our method would look like below:</p>\n<pre><code class=\"hljs\">def query(self, **kwargs):\n<span class=\"hljs-comment\"># Create group - provide group id used to calculate unique entity id in dynatrace and display name for UI presentation</span>\nself.logger.<span class=\"hljs-builtin-name\">info</span>(<span class=\"hljs-string\">&quot;URL: %s&quot;</span>, self.dynatraceURL)<span class=\"hljs-built_in\">\ngroup </span>= self.topology_builder.create_group(\n<span class=\"hljs-attribute\">identifier</span>=<span class=\"hljs-string\">&quot;CustomDeviceHostUnits&quot;</span>, <span class=\"hljs-attribute\">group_name</span>=<span class=\"hljs-string\">&quot;Custom Device Host Units&quot;</span>)\n<span class=\"hljs-comment\"># Create device - provide device id used to calculate unique entity id in dynatrace and display name for UI presentation</span>\ndevice = group.create_device(\n<span class=\"hljs-attribute\">identifier</span>=<span class=\"hljs-string\">&quot;CustomDeviceHostUnits&quot;</span>, <span class=\"hljs-attribute\">display_name</span>=<span class=\"hljs-string\">&quot;Custom Device Host Units&quot;</span>)\nself.logger.<span class=\"hljs-builtin-name\">info</span>(\n<span class=\"hljs-string\">&quot;Topology: group name=%s, device name=%s&quot;</span>, group.name, device.name)\n<span class=\"hljs-comment\"># Collect stats</span>\nstats = self.getHostUnits(<span class=\"hljs-string\">&quot;consumedHostUnits&quot;</span>)\n<span class=\"hljs-comment\"># report absolute value</span>\ndevice.absolute(<span class=\"hljs-attribute\">key</span>=<span class=\"hljs-string\">&#x27;hostUnits&#x27;</span>, <span class=\"hljs-attribute\">value</span>=stats)\nself.logger.<span class=\"hljs-builtin-name\">info</span>(<span class=\"hljs-string\">&quot;HostUnits: %s&quot;</span>, stats)\n</code></pre>\n<p>Note:\nhost-units consumed by a host is returned in <strong>\"consumedHostUnits\"</strong> of the returned JSON object by the API as seen below:\n<img src=\"assets/json-object-api-call.png\" alt=\"JSON-object\" /></p>\n<p>So, let us gather the values of the <code>consumedHostUnits</code> attribute and report in our function as below:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">getHostUnits</span>(<span class=\"hljs-params\">self, searchkey</span>):</span>\nhostinfo = requests.request(\n<span class=\"hljs-string\">&quot;GET&quot;</span>, self.dynatraceURL, headers=self.headers, data={}).content\n<span class=\"hljs-keyword\">if</span> hostinfo <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\nhostUnits = <span class=\"hljs-number\">0</span>\nhostdict = json.loads(hostinfo)\nhostUnitValues = [a_dict[searchkey] <span class=\"hljs-keyword\">for</span> a_dict <span class=\"hljs-keyword\">in</span> hostdict]\n<span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(hostUnitValues)):\nself.logger.info(<span class=\"hljs-string\">&#x27; &#x27;</span>.join(<span class=\"hljs-built_in\">map</span>(<span class=\"hljs-built_in\">str</span>, hostUnitValues)))\n<span class=\"hljs-keyword\">for</span> val <span class=\"hljs-keyword\">in</span> hostUnitValues:\nhostUnits = hostUnits + val\n<span class=\"hljs-keyword\">return</span> hostUnits\n</code></pre>\n<p>Save the python file.</p>\n<p><a href=\"https:/images/demo_custom_device.py\">Download demo<em>custom</em>device.py</a></p>","activityList":[]},{"id":"2","name":"Build and Upload","content":"<h2 id=\"buildandupload\">Build and Upload</h2>\n<p>In this step, we will build and deploy the extension.</p>\n<h3 id=\"generateextensionuploadtoken\">Generate Extension Upload Token</h3>\n<p>To upload the extension we first need to generate a token with <strong>WriteConfig</strong> permissions.\nWe will follow the same steps as before, the only difference being that of using the <strong>WriteConfig</strong> permissions.</p>\n<p><img src=\"assets/write-config-token.png\" alt=\"write-config-token\" /></p>\n<p>Save that token somewhere safe as we will use it in the following step.</p>\n<h3 id=\"buildtheplugin\">Build the plugin</h3>\n<p>To build the plugin, navigate to the folder with python and JSON file that was created for the extension and run the following commands:</p>\n<pre><code class=\"hljs\">$ sudo <span class=\"hljs-keyword\">su</span>\n$ plugin_sdk build_plugin --<span class=\"hljs-keyword\">token</span> {<span class=\"hljs-keyword\">token</span>}\n</code></pre>\n<p>This will create, build and upload the extension and the details of the plugin archive would be displayed as below.\n<img src=\"assets/plugin-archive-2.png\" alt=\"plugin-archive\" /></p>\n<p>Other Options you can run with the plugin<em>sdk can be found by running plugin</em>sdk --help or plugin<em>sdk build</em>plugin --help\n<img src=\"assets/plugin_sdk%20--help.png\" alt=\"plugin_sdk--help\" /></p>","activityList":[]},{"id":"3","name":"Configuration","content":"<h2 id=\"configuration\">Configuration</h2>\n<p>Now that the Custom Device is running you can go and see the metrics from your custom device.</p>\n<ol>\n<li><p>Go to <strong>Settings > Monitoring > Monitored technologies > Custom extensions</strong>, find your extension and click on it.</p></li>\n<li><p>Now it is time to add a new endpoint. Just come up with a name and enter the same URL as in the JSON file, select your Active gate host and click <strong>Add endpoint</strong>.</p></li>\n<li><p>Enter your tenant URL according to the hint displayed underneath, as well as your previously created API-Token</p></li>\n</ol>\n<p><img src=\"assets/add-endpoint.png\" alt=\"endpoint\" /></p>\n<ol start=\"3\">\n<li>See the available metrics under <code>Metrics</code> (next to <code>Endpoint configuration</code>).</li>\n</ol>\n<p><img src=\"assets/metrics.png\" alt=\"metrics\" /></p>\n<ol start=\"4\">\n<li>Go to <strong>Technologies and processes</strong>, find your Custom Device by looking for the technology you specified in the <code>python</code> file ( in this example <strong>Custom technology</strong>) and click on it. The name of your group will pop up below, please also click on that. Wow! Now you can look at charts - they become more interesting over time as a greater period of time will be measured.</li>\n</ol>\n<p><img src=\"assets/see-metrics.png\" alt=\"technologies\" /></p>\n<p>This is what the metrics look like for the example custom device:</p>\n<p><img src=\"assets/example-metrics.png\" alt=\"example-metrics\" /></p>","activityList":[]}]