[{"id":"1","name":"Setup your service naming rule (add the Kubernetes namespace and the application names to the service)","content":"<h2 id=\"setupyourservicenamingruleaddthekubernetesnamespaceandtheapplicationnamestotheservice\">Setup your service naming rule (add the Kubernetes namespace and the application names to the service)</h2>\n<ol>\n<li>Go to <strong>Settings -> Server-side service monitoring -> Service naming rules</strong></li>\n<li>Click <strong>Add a new rule</strong></li>\n<li>Provide a name say \"My-Service-Naming-Rule\", then set the Service name format as <strong>{ProcessGroup:KubernetesNamespace}-{ProcessGroup:NodeJsAppName}</strong></li>\n<li>Set the conditions based on Kubernetes namespace and application names (use <strong>Add condition</strong> to add more conditions)</li>\n<li>Click <strong>Create rule</strong> once we have configured all the fields</li>\n</ol>\n<blockquote>\n  <p>Note: Make sure you have defined the fields as below\n  <img src=\"./images/K8s-service-naming-rule.png\" alt=\"image\" /></p>\n</blockquote>","activityList":[]},{"id":"2","name":"Process and service names after the use of Dynatrace naming rules:","content":"<h2 id=\"processandservicenamesaftertheuseofdynatracenamingrules\">Process and service names after the use of Dynatrace naming rules:</h2>\n<p>Go to <strong>Hosts -> < Your-Kubernetes-Host > -> < Your-application-process ></strong></p>\n<p><img src=\"./images/K8s-rule-process-names.png\" alt=\"image\" /></p>\n<p>Select <strong>Service running on the process that we chose in the previous step</strong></p>\n<p><img src=\"./images/K8s-rule-service-names.png\" alt=\"image\" /></p>\n<h1 id=\"kuberneteslabelsindynatrace\">Kubernetes labels in Dynatrace</h1>\n<p>Dynatrace automatically detects all labels attached to pods at application deployment time. In this step, we add few lables to the running application pod.</p>\n<p>You should be able to view all the application pods running in your cluster by executing:</p>\n<p><code>kubectl get pods -n model-app</code></p>\n<p>Copy the application pod details and add the below labels using command:</p>\n<p><code>kubectl label pod my-app-pod -n model-app app.kubernetes.io/name=model-app app.kubernetes.io/version=1.0 app.kubernetes.io/managed-by=D1P app.kubernetes.io/component=backend</code></p>\n<p>We can validate the pod labels using the command:</p>\n<p><code>kubectl describe pod my-app-pod -n model-app</code></p>\n<p><strong>NOTE</strong>: Replace the my-app-pod string with the actual pod name determined using earlier command.</p>\n<p><img src=\"./images/K8s-Pod-Labels.png\" alt=\"image\" /></p>","activityList":[]},{"id":"3","name":"View the Kubernetes labels in Dynatrace","content":"<h2 id=\"viewthekuberneteslabelsindynatrace\">View the Kubernetes labels in Dynatrace</h2>\n<p>Go to <strong>Hosts -> < Your-Kubernetes-Host > -> < Your-application-process ></strong></p>\n<p><img src=\"./images/K8s-Pod-Labels-Dynatrace.png\" alt=\"image\" /></p>","activityList":[]},{"id":"4","name":"Leverage Kubernetes labels in Dynatrace","content":"<h2 id=\"leveragekuberneteslabelsindynatrace\">Leverage Kubernetes labels in Dynatrace</h2>\n<p>Grant viewer role to the service account that is associated to your application pod. We will add view privileges to the default service account in your application namespace using the command:</p>\n<p><code>kubectl -n model-app create rolebinding default-view --clusterrole=view --serviceaccount=model-app:default</code></p>\n<p><strong>NOTE</strong>: You can use any name for the string default-view</p>\n<p>Your Kubernetes labels will be automatically attached as Kubernetes tags to all monitored Kubernetes processes and services in your Dynatrace environment as below.</p>\n<p><img src=\"./images/K8s-Pod-Labels-Tags-Dynatrace-1.png\" alt=\"image\" />\n<img src=\"./images/K8s-Pod-Labels-Tags-Dynatrace-2.png\" alt=\"image\" /></p>\n<p>These Kubernetes tags can be used in searches, alerting profiles and other places within Dynatrace like any other Dynatrace tags</p>\n<p><img src=\"./images/K8s-Tags_Search.png\" alt=\"image\" /></p>\n<h1 id=\"releasemonitoring\">Release monitoring</h1>\n<p>Dynatrace detects versions of monitored processes based on multiple version detection strategies. For Kubernetes, labels from the deployed pods provide application and version metadata. Thus, Version, Kubernetes namespace and number of instance details show up in the real-time inventory section of the Release page which is available at <strong>Releases</strong> on the left menu.</p>\n<p><img src=\"./images/K8s-release-page.png\" alt=\"image\" /></p>\n<h1 id=\"availabilityalertforrunningpods\">Availability alert for running pods</h1>\n<p>In Dynatrace, we make use of custom events to check the availability of running pods in your application. Follow the below steps to create the custom event.</p>\n<ol>\n<li>Go to <strong>Settings -> Anomaly Detection -> Custom events for alerting</strong></li>\n<li>Click <strong>Create custom events for alerting</strong></li>\n<li>Select the Category as <strong>Cloud Platforms</strong>. Then, choose the Metric as <strong>Running pods for Wokloads</strong>.</li>\n<li>Set the aggregation as <strong>Average</strong></li>\n<li>Create a rule based filter based on the Kubernetes workload name(use <strong>Add rule-based filter</strong> to add more filters)</li>\n<li>Click <strong>Create rule-based filter</strong> once we have configured all the fields in this section</li>\n<li>Set the static thresholds for the pod count</li>\n<li>Give a name say <strong>Running<em>Pod</em>Count</strong> for the event in <strong>Event Description</strong> section</li>\n<li>Once we have configured all the fields, click <strong>Create custom events for alerting</strong></li>\n</ol>\n<p><img src=\"./images/K8s-custom-events-1.png\" alt=\"image\" />\n<img src=\"./images/K8s-custom-events-2.png\" alt=\"image\" /></p>","activityList":[]},{"id":"5","name":"Trigger custom events","content":"<h2 id=\"triggercustomevents\">Trigger custom events</h2>\n<p>To trigger an event, we can stop the running pods in the Kubernetes cluster using the below command:</p>\n<p><code>kubectl scale --replicas=0 deployment/app --namespace=model-app</code></p>\n<p>Problem gets opened in Dynatrace with information about the event.</p>\n<p><img src=\"./images/K8s-problem-open.png\" alt=\"image\" /></p>\n<p>Dynatrace AI engine checks the status of the event frequently and resolve the problem automatically as soon as the count of the running pods come back to normal.\nTo resolve the problem, we can scale up the running pods in the Kubernetes cluster using the below command:</p>\n<p><code>kubectl scale --replicas=1 deployment/app --namespace=model-app</code></p>\n<p>Problem gets resolved in Dynatrace.</p>\n<p><img src=\"./images/K8s-problem-close.png\" alt=\"image\" /></p>","activityList":[]},{"id":"6","name":"Session Objectives","content":"<h2 id=\"sessionobjectives\">Session Objectives</h2>\n<p>During the session, we will attend the following objectives on the provided kubernetes cluster:</p>\n<ol>\n<li>Cluster wide instrumentation automatically using the <strong>Dynatrace Operator</strong> or app-only monitoring and runtime injection.</li>\n<li>Advantages and working of the different deployment strategies.</li>\n<li>Walkthrough different components in the Kubernetes Cluster-view when deployed using <strong>Dynatrace Operator</strong>.</li>\n<li>Monitoring <strong>Event</strong> in Kubernetes and use-cases.</li>\n<li>Monitoring <strong>Persistent Volumes</strong> in your clusters to get alerts and notifications.</li>\n</ol>\n<!-- ------------------------ -->","activityList":[]},{"id":"7","name":"Setting up Dynatrace on Kubernetes","content":"<h2 id=\"settingupdynatraceonkubernetes\">Setting up Dynatrace on Kubernetes</h2>\n<p>In this step, install the Dynatrace Operator on your Kubernetes cluster so that the OneAgent can report and collect metrics from different pods.</p>\n<p>Use PuTTy (Windows), PowerShell (Windows) or Terminal (Mac), ssh into the instance using the following credentials:\n<strong>Username</strong>: <code>d1prumworkshop</code>\n<strong>Password</strong>:  <code>dynatrace</code></p>\n<p>Alternatively, you can connect to the SSH terminal by clicking on the icon as below:\n<img src=\"./images/ssh_terminal_access.png\" alt=\"image-ssh-terminal\" /></p>\n<p>Further become root user by executing the below command:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-variable\">$ </span>sudo su\n</code></pre>\n<p>Note: Password for root is <strong>dynatrace</strong></p>\n<p>Let us install the Dynatrace Operator on your Kubernetes cluster so that the OneAgent can report and collect metrics from different pods. Dynatrace support multiple deployment strategies to install the Dynatrace Operator, for Kubernetes integration. In this tutorial, we will use the automated mode.</p>\n<pre><code class=\"hljs bash language-bash\">$ kubectl config view --raw &gt; /home/ubuntu/.kube/config\n\n$ kubectl config view --raw &gt; ~/.kube/config\n\n$ <span class=\"hljs-built_in\">export</span> CLUSTER_SERVER=$(microk8s config | grep <span class=\"hljs-string\">&quot;server:&quot;</span> | sed <span class=\"hljs-string\">&#x27;s/^.*server: //&#x27;</span>)\n\n$ kubectl config set-cluster microk8s-cluster --insecure-skip-tls-verify=<span class=\"hljs-literal\">true</span> --server=<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$CLUSTER_SERVER</span>&quot;</span>\n</code></pre>\n<p>Negative\n:If you come across the following error\n<img src=\"./images/kube.png\" alt=\"image\" /></p>\n<p>Please execute the following command to resolve the error</p>\n<pre><code class=\"hljs bash language-bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>\n\n$ mkdir .kube\n\n$ <span class=\"hljs-built_in\">cd</span> .kube\n\n$ microk8s config &gt; config\n\n$ <span class=\"hljs-built_in\">export</span> CLUSTER_SERVER=$(microk8s config | grep <span class=\"hljs-string\">&quot;server:&quot;</span> | sed <span class=\"hljs-string\">&#x27;s/^.*server: //&#x27;</span>)\n\n$ kubectl config set-cluster microk8s-cluster --insecure-skip-tls-verify=<span class=\"hljs-literal\">true</span> --server=<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$CLUSTER_SERVER</span>&quot;</span>\n</code></pre>\n<h1 id=\"deploymentstrategies\">Deployment strategies</h1>\n<p>Dynatrace supports mutiple deployment strategies for monitoring kubernetes. During the step, we will go through the different strategies and the benefits.</p>","activityList":[]},{"id":"8","name":"App-only deployment:","content":"<h2 id=\"apponlydeployment\">App-only deployment:</h2>\n<p>This is the deployment approach you should consider when you have an application running on a 3rd party or on SaaS and you would like oneAgent to monitor the application.</p>","activityList":[]},{"id":"9","name":"Runtime Injection:","content":"<h2 id=\"runtimeinjection\">Runtime Injection:</h2>\n<p>A deployment strategy you should use when you would want to monitor applications only within a namespace or a selected few. This is partially automatic compared to \"App-only\" deployment.</p>\n<h1 id=\"startthesampleapplication\">Start the sample-application</h1>\n<p>We deploy the sample-application in two separate Kubernetes namespaces. Deployment of the application in separate namespaces is for the high availability. Create the namespaces using the below commands:</p>\n<p><code>kubectl create namespace model-app</code>\n<code>kubectl create namespace model-app-ha</code></p>\n<p>To start the sample-application pods, navigate to <code>/home/ubuntu/k8s</code> folder.</p>\n<p>Under that folder you would be able to view the yaml files for front-end and mongodb deployment. In order to deploy the services and deployment, run the following commands:</p>\n<p><code>kubectl apply -n model-app -f app-deployment.yaml</code>\n<code>kubectl apply -n model-app -f mongo-deployment.yaml</code>\n<code>kubectl apply -n model-app -f mongo-service.yaml</code>\n<code>kubectl apply -n model-app -f app-service.yaml</code></p>\n<p>Replicate the deployment of the sample-application in the second namespace with the following commands:</p>\n<p><code>kubectl apply -n model-app-ha -f app-deployment.yaml</code>\n<code>kubectl apply -n model-app-ha -f mongo-deployment.yaml</code>\n<code>kubectl apply -n model-app-ha -f mongo-service.yaml</code>\n<code>kubectl apply -n model-app-ha -f app-service.yaml</code></p>\n<p>This would create the deployment, pods and services for the application in both the namespaces.</p>\n<p>Now, in order to access the application from outside the k8s cluster, run the below commands:</p>\n<p><code>kubectl expose deployment/app --type=NodePort --name=model-app -n model-app --port 30005</code>\n<code>kubectl expose deployment/app --type=NodePort --name=model-app-ha -n model-app-ha --port 30006</code></p>\n<p>This would create a service which will be accessible from outside the cluster using <strong>< Instance-ip >:30005</strong> and <strong>< Instance-ip >:30006</strong> respectively.</p>\n<p>Verify if the services are up and running as expected using commands below. <br>\n<code>kubectl describe service model-app -n model-app</code>\n<code>kubectl describe service model-app-ha -n model-app-ha</code></p>\n<p><img src=\"./images/expose-model-app.png\" alt=\"image\" /></p>\n<h3 id=\"troubleshootingsteps\">⚠️ Troubleshooting steps</h3>\n<p>Negative\n: To <strong>check status of pods</strong>, run command below. You should get a <strong>Running</strong> as a return.<br>\n<code>kubectl get pods -n dynatrace</code></p>\n<p>Negative\n: To <strong>check the logs</strong>, run command below.<br>\n<code>kubectl logs -f deployment/dynatrace-oneagent-operator -n dynatrace</code></p>\n<p>Negative\n: To <strong>delete secrets</strong>, run command below. You might have included a wrong secret previously. <br>\n<code>kubectl delete secret --all -n dynatrace</code></p>\n<p>Negative\n: To <strong>delete all pods</strong>, run command below. This will cycle through the pods and you will have new pod instances.<br>\n<code>kubectl delete --all pods -n dynatrace</code></p>\n<p>Negative\n: To <strong>check status of deployments</strong>, run command below. You should get a <strong>Running</strong> as a return.<br>\n<code>kubectl get deployments -n dynatrace</code></p>\n<p>Negative\n: To <strong>check status of services</strong>, run command below. You should get a <strong>Running</strong> as a return.<br>\n<code>kubectl get deployments -n dynatrace</code></p>\n<p>Negative\n: To <strong>delete a service</strong>, run command below.<br>\n<code>kubectl delete service &lt;serviceName&gt; -n dynatrace</code></p>\n<p>Negative\n: Official troubleshooting page could be found <a href=\"https://www.dynatrace.com/support/help/technology-support/cloud-platforms/google-cloud-platform/google-kubernetes-engine/installation-and-operation/full-stack/troubleshoot-oneagent-on-google-kubernetes-engine/\">here</a></p>\n<h1 id=\"accessingtheapplication\">Accessing the application</h1>\n<p>Now, register an user on the application at http://<IP-address>:30005/register or http://<IP-address>:30006/register page with the following details:\n<strong>Name</strong>: Guest User\n<strong>E-Mail Address</strong>: guestuser@mybank.com\n<strong>Password</strong>: GuestUser12@\n<strong>Name</strong>: 123456789\n<img src=\"./images/register-user-app.png\" alt=\"image\" /></p>\n<p>As you have completed registering yourself on the application, now login into the app from http://<my-IP>:30005/login or http://<my-IP>:30005/login with the credentials as below:</p>\n<p><strong>E-Mail Address</strong>: guestuser@mybank.com\n<strong>Password</strong>: GuestUser12@</p>\n<h1 id=\"startthesockshopapplication\">Start the sock-shop application</h1>\n<p>In this step, let us see how we monitor another separate application that uses the same Kubernetes cluster. We deploy the sock-shop application in a separate namespace. Create the namespace using the below command:</p>\n<p><code>kubectl create namespace sock-shop</code></p>\n<p>To start the sock-shop application pods, navigate to <code>/home/ubuntu/k8s</code> folder and run the following command:</p>\n<p><code>kubectl convert -f . | kubectl create -f -</code></p>\n<p>To <strong>check status of pods</strong> for sock-shop application, run command below. You should get a <strong>Running</strong> as a return.<br>\n<code>kubectl get pods -n sock-shop</code></p>\n<h1 id=\"settingupkubernetesintegration\">Setting up Kubernetes Integration</h1>\n<p>In this step, let us integrate your kubernetes cluster with Dynatrace. The integration would give us a quick view of the environment/pods running on your kubernetes cluster.</p>\n<p>In order to integrate kubernetes, you are required to install Environment activeGate.</p>","activityList":[]},{"id":"10","name":"Setup Environment activeGate","content":"<h2 id=\"setupenvironmentactivegate\">Setup Environment activeGate</h2>\n<ol>\n<li>Within Dynatrace, click on Deploy Hub on the left menu</li>\n<li>Click on Activegate at the bottom of the page</li>\n<li>Click on Install Activegate &gt; Linux</li>\n<li>Copy Step 2 from Dynatrace and paste into your shell terminal.</li>\n<li>Copy Step 4 from Dynatrace and append \"sudo\" (installing as root) onto shell terminal.</li>\n</ol>\n<p><img src=\"./images/ActiveGate-install-1.png\" alt=\"image\" />\n<img src=\"./images/ActiveGate-install-2.png\" alt=\"image\" /></p>\n<p>Once completed, you should see Activegate under Deployment Status.</p>\n<p><img src=\"./images/AG-deployment-status.png\" alt=\"image\" /></p>","activityList":[]},{"id":"11","name":"Create a Service Account and Cluster role","content":"<h2 id=\"createaserviceaccountandclusterrole\">Create a Service Account and Cluster role</h2>\n<p>Create a service account and cluster role for accessing the Kubernetes API. This creates the bearer token necessary to authenticate in the Kubernetes API. Use the following snippet in your shell terminal.</p>\n<pre><code class=\"hljs bash language-bash\">kubectl apply -f https://www.dynatrace.com/support/<span class=\"hljs-built_in\">help</span>/codefiles/kubernetes/kubernetes-monitoring-service-account.yaml\n</code></pre>","activityList":[]},{"id":"12","name":"Setup your Kubernetes Integration","content":"<h2 id=\"setupyourkubernetesintegration\">Setup your Kubernetes Integration</h2>\n<p>Go to <strong>Settings -> Cloud and Virtualization -> Kubernetes -> Connect new cluster</strong></p>\n<h3 id=\"getthekubernetesapiurl\">Get the Kubernetes API URL</h3>\n<p>Enter the below command and copy it for the <strong>Kubernetes API URL</strong>.</p>\n<pre><code class=\"hljs bash language-bash\">kubectl config view --minify -o jsonpath=<span class=\"hljs-string\">&#x27;{.clusters[0].cluster.server}&#x27;</span>\n</code></pre>\n<h3 id=\"getthebearertoken\">Get the Bearer Token</h3>\n<p>Enter the below command and copy it for the <strong>Kubernetes Bearer Token</strong>.</p>\n<pre><code class=\"hljs bash language-bash\">kubectl get secret $(kubectl get sa dynatrace-monitoring -o jsonpath=<span class=\"hljs-string\">&#x27;{.secrets[0].name}&#x27;</span> -n dynatrace) -o jsonpath=<span class=\"hljs-string\">&#x27;{.data.token}&#x27;</span> -n dynatrace | base64 --decode\n</code></pre>\n<h1 id=\"integrateyourkubernetesclusterwithdynatrace\">Integrate your Kubernetes cluster with Dynatrace</h1>\n<ol>\n<li>Go to <strong>Settings > Cloud and virtualization > Kubernetes.</strong></li>\n<li>Select Connect new cluster.</li>\n<li>Provide a Name say \"K8s-cluster\", Kubernetes API URL (retrieved from \"Get the Kubernetes API URL\" step above), and the Bearer token (retrieved from \"Get the Bearer   Token\" step above) for the Kubernetes cluster.</li>\n</ol>\n<blockquote>\n  <p>Note: Make sure you have enabled the configurables as below:\n  <img src=\"./images/K8s-cluster.png\" alt=\"image\" /></p>\n</blockquote>\n<p>Once successfully connected, click on Kubernetes on the left menu and explore the Kubernetes UI.</p>\n<p><img src=\"./images/K8s-view.png\" alt=\"image\" />\n<img src=\"./images/K8s-view-detailed-sock-shop.png\" alt=\"image\" />\n<img src=\"./images/K8s-view-detailed-model-app.png\" alt=\"image\" /></p>\n<p>Also, there would be some preset dashboards already in your tenant to view your Kubernetes cluster details available at <strong>Dashboards</strong> on the left menu</p>\n<p><img src=\"./images/K8s-preset-dashboard.png\" alt=\"image\" /></p>\n<p>Kubernetes Cluster overview dashboard is displayed as below. Similarly, we can view the other dashboards as well from the list of <strong>Dashboards</strong></p>\n<p><img src=\"./images/K8s-preset-dashboard-cluster-overview.png\" alt=\"image\" /></p>\n<h1 id=\"dynatraceprocessandservicenamingrules\">Dynatrace process and service naming rules</h1>\n<p>Dynatrace automatically detects the processes which are running on the monitored host. With the help of process and service naming rules, application team can customize the names of the monitored processes and services within Dynatrace to suit their requirements by giving meaningful names.</p>","activityList":[]},{"id":"13","name":"Actual process and service names before the use of Dynatrace naming rules:","content":"<h2 id=\"actualprocessandservicenamesbeforetheuseofdynatracenamingrules\">Actual process and service names before the use of Dynatrace naming rules:</h2>\n<p>Go to <strong>Hosts -> < Your-Kubernetes-Host > -> < Your-application-process ></strong></p>\n<p><img src=\"./images/K8s-actual-process-names.png\" alt=\"image\" /></p>\n<p>Select <strong>Service running on the process that we chose in the previous step</strong></p>\n<p><img src=\"./images/K8s-actual-service-names.png\" alt=\"image\" /></p>","activityList":[]},{"id":"14","name":"Setup your process naming rule (add the Kubernetes namespace and the application names to the process)","content":"<h2 id=\"setupyourprocessnamingruleaddthekubernetesnamespaceandtheapplicationnamestotheprocess\">Setup your process naming rule (add the Kubernetes namespace and the application names to the process)</h2>\n<ol>\n<li>Go to <strong>Settings -> Processes and containers -> Process group naming</strong></li>\n<li>Click <strong>Add a new rule</strong></li>\n<li>Provide a name say \"My-Process-Naming-Rule\", then set the Process group name format as <strong>{ProcessGroup:KubernetesNamespace}-{ProcessGroup:NodeJsAppName}</strong></li>\n<li>Set the conditions based on Kubernetes namespace and application names (use <strong>Add condition</strong> to add more conditions)</li>\n<li>Click <strong>Create rule</strong> once we have configured all the fields</li>\n</ol>\n<blockquote>\n  <p>Note: Make sure you have defined the fields as below\n  <img src=\"./images/K8s-process-naming-rule.png\" alt=\"image\" /></p>\n</blockquote>","activityList":[]}]