[{"id":"1","name":"OneAgent installation","content":"<h2 id=\"oneagentinstallation\">OneAgent installation</h2>\n<p>Duration: 00:20:00</p>\n<p>In this step, we will install the OneAgent.</p>\n<p>Install the oneAgent so that the extension can report the metrics to Dynatrace</p>\n<ol>\n<li>Within your tenant, select <strong>Dynatrace Hub</strong> from the navigation menu.</li>\n</ol>\n<p><img src=\"assets/dynatrace-hub.png\" alt=\"dynatrace-hub\" /></p>\n<ol start=\"2\">\n<li>Click on the <strong>OneAgent</strong> field.</li>\n</ol>\n<p><img src=\"assets/oneagend-field.png\" alt=\"oneagent-field\" /></p>\n<ol start=\"3\">\n<li>Click on <strong>Download OneAgent</strong> in the bottom right.</li>\n</ol>\n<p><img src=\"assets/download-oneagent.png\" alt=\"download-oneagent\" /></p>\n<ol>\n<li>Choose your Operating System (x in this case) and create a new PaaS token, if you don't already have one. Than, simply copy the commands each and execute them.</li>\n</ol>\n<p><img src=\"assets/choose-linux.png\" alt=\"choose-linux\" /></p>\n<p><img src=\"assets/paas-token-created.png\" alt=\"paas-token-created\" /></p>\n<ol start=\"6\">\n<li>Connect to your AWS instance by using the following credentials:</li>\n</ol>\n<pre><code class=\"hljs bash language-bash\">Username: dynatrace\nPassword: dynatrace\n</code></pre>\n<p>Now, become the root user by running <code>sudo su</code></p>\n<p>Positive\n: Password is <strong>dynatrace</strong></p>\n<p>Further, let us start the application. In order to start the application, follow the steps as below:\nNavigate to /home/ubuntu/mongo-extension folder by executing the following commands:</p>\n<pre><code class=\"hljs bash language-bash\"><span class=\"hljs-built_in\">cd</span> /home/ubuntu/mongo-extension\nnohup npm start &amp;\n</code></pre>","activityList":[]},{"id":"2","name":"Pre-requisites","content":"<h2 id=\"prerequisites\">Pre-requisites</h2>\n<p>Duration: 00:10:00</p>\n<p>In this step, we will see the metrics that are pulled by dynatrace once you have the application running and made some calls to the database.</p>\n<p>Dynatrace automatically identifies the services and database calls once you have installed oneAgent on your server. Let us explore the view that Dynatrace provides out-of-the-box for technology. We can use MongoDB as one of the example.</p>\n<p>All the databases for your environment/management-zone are captured under the <strong>Databases</strong> menu option\n<img src=\"assets/technology-overview.png\" alt=\"technology-overview\" /></p>\n<p>That's already very helpful if you want to know how your database is performing, but there is more.</p>\n<p>If we want to dive deeper, we can click on MongoDb and select the process group that has been created automatically.</p>\n<p><img src=\"assets/process-group.png\" alt=\"process-group\" /></p>\n<p>This earlier view provides all the metrics that have resulted by the service calls to mongo-db and other critical health/technology metrics that are useful for running mongodb. However, you can extend the metrics by writing your own extension.\n<img src=\"assets/before-extension.png\" alt=\"before-extension\" /></p>\n<p>The process is also monitored, and that's where our extension is going to be reporting data to.</p>\n<p><img src=\"assets/process-before-extension.png\" alt=\"process-before-extension\" /></p>\n<p>In the next steps, we will take a look on how to create and install an extension for MongoDB.</p>\n<p>You need to disable the built-in extension that is already implemented in the OneAgent in order to get your own extension running.</p>\n<p>To do that, go to <strong>Settings / Monitored technologies</strong> and look for the MongoDB entry. Click on the pen on the right to edit the configuration. You can easily enable this if you want to get this extension back running.</p>\n<p><img src=\"assets/uncheck-buttons.png\" alt=\"uncheck both\" /></p>\n<!-- ------------------------ -->","activityList":[]},{"id":"3","name":"The PluginSDK","content":"<h2 id=\"thepluginsdk\">The PluginSDK</h2>\n<p>Duration: 00:10:00</p>\n<p>In this step, we will take a look at the PluginSDK that is needed to code your extensions.</p>\n<h4 id=\"whatisthepluginsdkandwhatdoweneeditfor\">What is the Plugin SDK and what do we need it for?</h4>\n<p>The Plugin SDK is crucial when it comes to creating your own extensions.\nIt contains a few example extensions that can be modified to your needs, as well as a script that lets you easily compile, build, or upload the extension to your environment. Lets have a look on how to create your own MongoDB extension:</p>\n<h4 id=\"downloadthesdk\">Download the SDK</h4>\n<p>Within your tenant, navigate to <strong>Settings</strong> menu option\nDynatrace bundles some extensions by default - this view will provide overview of all the extensions that are available for you to use.\n<img src=\"assets/supported-technologies.png\" alt=\"supported-technologies\" /></p>\n<p>To upload your customized extension, navigate to <strong>Custom Extensions</strong> and click on <strong>Add new technology monitoring</strong>.\n<img src=\"assets/add-new-technology-monitoring.png\" alt=\"add-new-technology-monitoring\" /></p>\n<p>On the right, click on <strong>Add OneAgent Extension</strong>, and than on <strong>Download extension SDK</strong>.</p>\n<p><img src=\"assets/download-extension-sdk.png\" alt=\"download-extension-sdk\" /></p>\n<p>Additional information on build extensions can be found in our documentation <a href=\"https://dynatrace.github.io/plugin-sdk/readme.html\">here</a></p>\n<p>Once the extension is downloaded, extract the downloaded .zip folder.</p>\n<h4 id=\"installthesdk\">Install the SDK</h4>\n<p>One of the important pre-requisites for extension to work is to make sure you are using the same OS and Python version as that of the host where you would deploy the extension to. This is required as some Python libraries use natively compiled code.</p>\n<p>To install the PluginSDK, <code>cd</code> into the folder that you downloaded and run</p>\n<p><code>pip3 install plugin-sdk-your.version.number</code></p>\n<p>To verify the installation was successful, run <code>plugin_sdk</code></p>\n<p>Positive\n: Close your bash and reopen it if the command is not found</p>","activityList":[]},{"id":"4","name":"Look at a example extension","content":"<h2 id=\"lookataexampleextension\">Look at a example extension</h2>\n<p>In this step, we will take a look at what the examples look like</p>\n<p>Before we start writing our own extension, let us look at a sample extension that is available.</p>\n<p>In the folder, there are a few things to note</p>\n<ul>\n<li>The <code>docs</code> folder contains the <a href=\"https://dynatrace.github.io/plugin-sdk/readme.html\">extension development guide</a></li>\n<li>The <code>examples</code> folder contains a few pre-written extensions that can help you build your own one</li>\n<li>Last but not least, you will find a <code>.whl</code> file, which is a common format in the python world for an installation file</li>\n</ul>\n<p>Go into <code>examples</code> and choose one of the folders. For example, the <code>demo_oneagent_plugin_host</code>.</p>\n<p>What are we looking at here?</p>\n<p>Any extension would constitute of the following files:</p>\n<ul>\n<li>A <code>.py</code> file, which is where we are going to code our extension</li>\n<li>A <code>plugin.json</code> file, that contains 4 main config blocks: metadata, metrics, visualization, and configuration</li>\n</ul>\n<p>Positive\n: The other files are sample data and not part of the code that is required to be implemented as part of your extension</p>\n<p><img src=\"assets/python-and-json-file.png\" alt=\"python-and-json-file\" /></p>\n<h3 id=\"explorepyfile\">Explore .py file</h3>\n<p><img src=\"assets/python-file-overview.png\" alt=\"python-file-overview\" /></p>\n<p>Creating any extension would involve the following functions:</p>\n<ol>\n<li>Collect data - Identify the process where the extension would pull data from.</li>\n<li>Send data - Define the metrics that you plan to populate using the extension</li>\n<li>Data configuration - The configuration to visualize the metrics pulled using extension.</li>\n</ol>\n<p>We use some libraries from BasePlugin class, so make sure you import the BasePlugin line as below:</p>\n<pre><code class=\"hljs pyhton language-pyhton\"><span class=\"hljs-keyword\">from</span> ruxit.apt.base_plugin <span class=\"hljs-keyword\">import</span> BasePlugin\n</code></pre>\n<h3 id=\"collectdata\">Collect Data</h3>\n<p>Under collect data, help identify the process endpoint where you will pull data from as below.</p>\n<pre><code class=\"hljs pyhton language-pyhton\">stats_url= <span class=\"hljs-string\">&quot;http://localhost:876</span>\n</code></pre>\n<h3 id=\"senddata\">Send Data</h3>\n<pre><code class=\"hljs python language-python\">self.results_builder.absolute(key=<span class=\"hljs-string\">&#x27;battery_level&#x27;</span>, value=stats[<span class=\"hljs-string\">&#x27;battery_level&#x27;</span>])\n</code></pre>\n<p>In the above line, <code>battery_level</code> is the metrics for which you are populating the data and <code>value</code> is the value of that metric at that time.</p>\n<p>Now, it gets really interesting:</p>\n<pre><code class=\"hljs pyhton language-pyhton\">self.results_builder.absolute(<span class=\"hljs-attribute\">key</span>=<span class=\"hljs-string\">&#x27;battery_level&#x27;</span>, <span class=\"hljs-attribute\">value</span>=stats[<span class=\"hljs-string\">&#x27;battery_level&#x27;</span>])\n</code></pre>\n<h3 id=\"configurethevisualization\">Configure the visualization</h3>\n<p>In this section, you can define the configuration to visualize the data.</p>\n<p>The <code>key</code> is what you want the metric to be named, and the <code>value</code> is what is going to be displayed in the graph.</p>\n<p>There are different versions of this function, so please check out the <a href=\"https://dynatrace.github.io/plugin-sdk/_apidoc/ruxit.api.html#module-ruxit.api.results_builder\">documentation</a> for further details.</p>\n<p>Next, the <code>plugin.json</code> file:</p>\n<p><img src=\"assets/json-overview.png\" alt=\"json-overview\" /></p>\n<p>Let us split the file into various sections as per their functionalities.</p>\n<pre><code class=\"hljs json language-json\">{\n<span class=\"hljs-attr\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;custom.python.demo_plugin_host&quot;</span>,\n<span class=\"hljs-attr\">&quot;version&quot;</span>: <span class=\"hljs-string\">&quot;1.3&quot;</span>,\n<span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;python&quot;</span>,\n<span class=\"hljs-attr\">&quot;entity&quot;</span>: <span class=\"hljs-string\">&quot;HOST&quot;</span>,\n<span class=\"hljs-attr\">&quot;metricGroup&quot;</span>: <span class=\"hljs-string\">&quot;demo_metrics.host&quot;</span>,\n<span class=\"hljs-attr\">&quot;technologies&quot;</span>: [<span class=\"hljs-string\">&quot;PYTHON&quot;</span>],\n</code></pre>\n<p>The above section contains the metadata for your extension. Details of the important configurable are as below:</p>\n<ul>\n<li><strong>version</strong>: This is the release or version details of your extension.</li>\n<li><strong>name</strong>: the name of the extension and is customizable.</li>\n<li><strong>metricGroup</strong>: the group where the extension would report the collected metrics to.</li>\n</ul>\n<pre><code class=\"hljs json language-json\">&quot;source&quot;: {\n&quot;package&quot;: &quot;demo_plugin_host&quot;,\n&quot;className&quot;: &quot;DemoPluginHost&quot;,\n</code></pre>\n<p>The value of <strong>ClassName</strong> has to be the same as you named the class in your python script, since OneAgent will look for this package while trying to retrieve data.</p>\n<pre><code class=\"hljs json language-json\">&quot;metrics&quot;: [\n{\n&quot;timeseries&quot;: {\n&quot;key&quot;: &quot;battery_level&quot;,\n&quot;unit&quot;: &quot;Percent&quot;,\n&quot;displayname&quot;: &quot;Battery level&quot;\n}\n}\n],\n</code></pre>\n<p>Here, we are defining what metrics we want to send to Dynatrace. You can specify here what name the metric should have internally, as well as the name that is going to be displayed in Dynatrace.</p>\n<p>The above defines the visualization metrics for the extension as below:</p>\n<ul>\n<li><strong>key</strong>: The internal name of the metrics that Dynatrace would create an entry for in its own database.</li>\n<li><strong>unit</strong>: Mention the different units available.</li>\n<li><strong>displayName</strong>: Display name on the screen.</li>\n</ul>\n<pre><code class=\"hljs json language-json\">&quot;configUI&quot;: {\n&quot;displayName&quot;: &quot;OneAgent Demo Host Extension&quot;\n},\n</code></pre>\n<p>The <code>configUI:</code> part is where you can define the name that the custom extension will have in the Custom Extensions section.</p>\n<pre><code class=\"hljs json language-json\">&quot;ui&quot;: {\n&quot;keycharts&quot; : [\n{\n&quot;group&quot; : &quot;Battery&quot;,\n&quot;title&quot; : &quot;Battery level&quot;,\n&quot;series&quot; : [\n{\n&quot;key&quot; : &quot;battery_level&quot;,\n&quot;displayname&quot; : &quot;Battery level&quot;\n}\n]\n}\n]\n}\n</code></pre>\n<p>This part of the JSON defines how metrics are charted on each Process page.</p>\n<p>If there is something specific you want to take a deeper look into, visit <a href=\"https://dynatrace.github.io/plugin-sdk/apidoc.html\">the documentation</a>, as there you can see what part of the files you definitely need and what is optional</p>","activityList":[]},{"id":"5","name":"Writing your own extension","content":"<h2 id=\"writingyourownextension\">Writing your own extension</h2>\n<p>Duration: 01:00:00</p>\n<p>In this step, we will write our own MongoDB extension.</p>\n<h3 id=\"listoflearnings\">List of Learnings</h3>\n<ul>\n<li>how to create your own extension</li>\n<li>how to upload it to Dynatrace</li>\n</ul>\n<h3 id=\"prerequisites\">Prerequisites</h3>\n<p>It is good to start with copying an existing example and changing what is needed.</p>\n<p>So, let's grab the <code>demo_plugin_host</code> extension and add a little bit to it.</p>\n<p>Right now, the file <code>demo_plugin_host</code> looks like this:</p>\n<pre><code class=\"hljs python language-python\"><span class=\"hljs-keyword\">import</span> requests\n<span class=\"hljs-keyword\">from</span> ruxit.api.base_plugin <span class=\"hljs-keyword\">import</span> BasePlugin\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DemoPluginHost</span>(<span class=\"hljs-params\">BasePlugin</span>):</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">query</span>(<span class=\"hljs-params\">self, **kwargs</span>):</span>\nstats_url = <span class=\"hljs-string\">&quot;http://localhost:8769&quot;</span>\nstats = requests.get(stats_url).json()\nself.results_builder.absolute(key=<span class=\"hljs-string\">&#x27;battery_level&#x27;</span>, value=stats[<span class=\"hljs-string\">&#x27;battery_level&#x27;</span>])\n</code></pre>\n<p>What we are going to do is to get the current connections of our MongoDB database, but you can gather any data you want to monitor with Dynatrace.</p>\n<p>First of all, we are going to create a new folder with the name we want, e.g. <code>custom_mongo_extension</code>. In there, create one <code>custom_mongo_extension.py</code> and a <code>plugin.json</code> file. You can copy one of the examples to get started.</p>\n<p>So, in this case, we are going to create a python file like this:\n<strong>Imports and global variables</strong></p>\n<pre><code class=\"hljs python language-python\"><span class=\"hljs-keyword\">import</span> pymongo\n<span class=\"hljs-keyword\">from</span> pymongo.errors <span class=\"hljs-keyword\">import</span> ConnectionFailure\n<span class=\"hljs-keyword\">import</span> logging\n<span class=\"hljs-keyword\">import</span> ssl\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> Optional\n<span class=\"hljs-keyword\">from</span> datetime <span class=\"hljs-keyword\">import</span> datetime\n<span class=\"hljs-keyword\">import</span> requests\n\n<span class=\"hljs-keyword\">from</span> ruxit.api.base_plugin <span class=\"hljs-keyword\">import</span> BasePlugin\n<span class=\"hljs-keyword\">from</span> ruxit.api.selectors <span class=\"hljs-keyword\">import</span> ListenPortSelector\n\nlog = logging.getLogger(__name__)\n\nTIMEOUT = <span class=\"hljs-number\">15</span> * <span class=\"hljs-number\">1000</span>\n</code></pre>\n<p><strong>Class declaration and initzialize-Function</strong></p>\n<pre><code class=\"hljs python language-python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CustomMongoExtension</span>(<span class=\"hljs-params\">BasePlugin</span>):</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">initialize</span>(<span class=\"hljs-params\">self, **kwargs</span>):</span>\nself.mongodb_client = self.create_client()\n</code></pre>\n<p><strong>Create connection to MongoDB</strong></p>\n<pre><code class=\"hljs python language-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">create_client</span>(<span class=\"hljs-params\">self</span>) -&gt; Optional[pymongo.MongoClient]:</span>\nport = self.config.get(<span class=\"hljs-string\">&quot;port&quot;</span>)\nuser = self.config.get(<span class=\"hljs-string\">&quot;auth_user&quot;</span>)\npassword = self.config.get(<span class=\"hljs-string\">&quot;auth_password&quot;</span>)\n\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> user <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">not</span> password:\nurl = <span class=\"hljs-string\">f&quot;mongodb://127.0.0.1:<span class=\"hljs-subst\">{port}</span>/test&quot;</span>\n<span class=\"hljs-keyword\">else</span>:\nurl = <span class=\"hljs-string\">f&quot;mongodb://<span class=\"hljs-subst\">{user}</span>:<span class=\"hljs-subst\">{password}</span>@127.0.0.1:<span class=\"hljs-subst\">{port}</span>/test&quot;</span>\nauth_db = self.config.get(<span class=\"hljs-string\">&quot;auth_db&quot;</span>, <span class=\"hljs-literal\">False</span>)\n<span class=\"hljs-keyword\">if</span> auth_db:\nurl = <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{url}</span>/?authSource=<span class=\"hljs-subst\">{auth_db}</span>&quot;</span>\n\n<span class=\"hljs-keyword\">try</span>:\nmongodb_client = pymongo.MongoClient(url, ssl=<span class=\"hljs-literal\">True</span>, ssl_cert_reqs=ssl.CERT_NONE, serverSelectionTimeoutMS=TIMEOUT)\nmongodb_client.list_databases()\nlog.info(<span class=\"hljs-string\">&quot;Connected to mongodb[SSL]&quot;</span>)\n<span class=\"hljs-keyword\">return</span> mongodb_client\n<span class=\"hljs-keyword\">except</span> ConnectionFailure:\nmongodb_client = pymongo.MongoClient(url, serverSelectionTimeoutMS=TIMEOUT)\nmongodb_client.list_databases()\nlog.info(<span class=\"hljs-string\">&quot;Connected to mongodb&quot;</span>)\n<span class=\"hljs-keyword\">return</span> mongodb_client\n</code></pre>\n<p><strong>Call function to fetch data from MongoDB</strong></p>\n<pre><code class=\"hljs python language-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">query</span>(<span class=\"hljs-params\">self, **kwargs</span>) -&gt; <span class=\"hljs-keyword\">None</span>:</span>\n<span class=\"hljs-keyword\">if</span> self.mongodb_client <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\nself.mongodb_client = self.create_client()\n<span class=\"hljs-keyword\">else</span>:\nself.get_server_metrics()\n</code></pre>\n<p><strong>Get Data from MongoDB</strong></p>\n<pre><code class=\"hljs python language-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_server_metrics</span>(<span class=\"hljs-params\">self</span>):</span>\nserver_status = self.mongodb_client.db.command(<span class=\"hljs-string\">&quot;serverStatus&quot;</span>)\nself.send_metric(<span class=\"hljs-string\">&quot;workshop_current_connections&quot;</span>, server_status[<span class=\"hljs-string\">&quot;connections&quot;</span>][<span class=\"hljs-string\">&quot;current&quot;</span>])\n</code></pre>\n<p><strong>Send Data to Dynatrace</strong></p>\n<pre><code class=\"hljs python language-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">send_metric</span>(<span class=\"hljs-params\">self, key, value</span>):</span>\nself.results_builder.absolute(key=key, value=value, entity_selector=ListenPortSelector(self.config.get(<span class=\"hljs-string\">&quot;port&quot;</span>)))\n</code></pre>\n<p>The <code>plugin.json</code> in your case can look something like this:</p>\n<p><strong>Metadata definition</strong></p>\n<pre><code class=\"hljs json language-json\">{\n<span class=\"hljs-attr\">&quot;version&quot;</span>: <span class=\"hljs-string\">&quot;3.0.02&quot;</span>,\n<span class=\"hljs-attr\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;custom.python.custom_mongo_extension&quot;</span>,\n<span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;python&quot;</span>,\n<span class=\"hljs-attr\">&quot;entity&quot;</span>: <span class=\"hljs-string\">&quot;PROCESS_GROUP_INSTANCE&quot;</span>,\n<span class=\"hljs-attr\">&quot;processTypeNames&quot;</span>: [<span class=\"hljs-string\">&quot;UNKNOWN&quot;</span>, <span class=\"hljs-string\">&quot;MONGODB&quot;</span>],\n<span class=\"hljs-attr\">&quot;metricGroup&quot;</span>: <span class=\"hljs-string\">&quot;tech.MongoDB.CustomExtension&quot;</span>,\n<span class=\"hljs-attr\">&quot;source&quot;</span>: {\n<span class=\"hljs-attr\">&quot;package&quot;</span>: <span class=\"hljs-string\">&quot;custom_mongo_extension&quot;</span>,\n<span class=\"hljs-attr\">&quot;className&quot;</span>: <span class=\"hljs-string\">&quot;CustomMongoExtension&quot;</span>,\n<span class=\"hljs-attr\">&quot;install_requires&quot;</span>: [\n<span class=\"hljs-string\">&quot;requests&gt;=2.6.0&quot;</span>\n],\n<span class=\"hljs-attr\">&quot;activation&quot;</span>: <span class=\"hljs-string\">&quot;Singleton&quot;</span>\n},\n</code></pre>\n<p><strong>Basic chart configuration</strong></p>\n<pre><code class=\"hljs json language-json\">&quot;ui&quot;: {\n&quot;keyMetrics&quot;: [\n{\n&quot;key&quot;: &quot;workshop_current_connections&quot;,\n&quot;displayname&quot;: &quot;Connections&quot;,\n&quot;mergeaggregation&quot; : &quot;sum&quot;\n}\n],\n&quot;keycharts&quot;: [\n{\n&quot;title&quot; : &quot;Workshop - Current connections&quot;,\n&quot;group&quot; : &quot;MongoDB metrics&quot;,\n&quot;series&quot; : [\n{\n&quot;key&quot; : &quot;workshop_current_connections&quot;,\n&quot;displayname&quot; : &quot;Connections&quot;,\n&quot;seriestype&quot; : &quot;bar&quot;,\n&quot;unit&quot; : &quot;Count&quot;\n}\n]\n}\n]\n},\n</code></pre>\n<p><strong>Configuration through UI</strong></p>\n<pre><code class=\"hljs json language-json\">&quot;configUI&quot; :{\n&quot;displayName&quot;: &quot;CustomMongoExtension&quot;,\n&quot;properties&quot; : [\n{ &quot;key&quot; : &quot;auth_user&quot;, &quot;displayName&quot;: &quot;User&quot;, &quot;displayOrder&quot;: 1 },\n{ &quot;key&quot; : &quot;auth_password&quot;, &quot;displayName&quot;: &quot;Password&quot;, &quot;displayOrder&quot;: 2 },\n{ &quot;key&quot; : &quot;port&quot;, &quot;displayName&quot;: &quot;Port&quot;, &quot;displayOrder&quot;: 3 },\n{ &quot;key&quot; : &quot;auth_db&quot;, &quot;displayName&quot;: &quot;Authentication Database&quot;, &quot;displayOrder&quot;: 4, &quot;displayHint&quot;: &quot;Leave empty for default&quot; }\n]\n},\n</code></pre>\n<p><strong>Properties that can be used in your extension</strong></p>\n<pre><code class=\"hljs json language-json\">&quot;properties&quot; : [\n{\n&quot;key&quot; : &quot;port&quot;,\n&quot;type&quot; :  &quot;String&quot;,\n&quot;defaultValue&quot; : &quot;27017&quot;\n},\n{\n&quot;key&quot; : &quot;auth_user&quot;,\n&quot;type&quot; :  &quot;String&quot;,\n&quot;defaultValue&quot; : &quot;**********&quot;\n},\n{\n&quot;key&quot; : &quot;auth_password&quot;,\n&quot;type&quot; :  &quot;Password&quot;,\n&quot;defaultValue&quot; : &quot;**********&quot;\n},\n{\n&quot;key&quot; : &quot;auth_db&quot;,\n&quot;type&quot;: &quot;String&quot;,\n&quot;defaultValue&quot;:  &quot;&quot;\n}\n],\n&quot;metrics&quot;: [\n{\n&quot;timeseries&quot;: {\n&quot;key&quot;: &quot;workshop_current_connections&quot;,\n&quot;unit&quot;: &quot;Count&quot;,\n&quot;displayname&quot; : &quot;Current connections&quot;\n}\n}\n]\n}\n</code></pre>\n<p>In the next step, let's take a look at what is new in comparison to the demo we examined earlier.</p>\n<!-- ------------------------ -->","activityList":[]},{"id":"6","name":"Examine the files","content":"<h2 id=\"examinethefiles\">Examine the files</h2>\n<p>Duration: 00:50:00</p>\n<p>In this file, we will take a look at what our new files contain.</p>\n<h3 id=\"listoflearnings\">List of Learnings</h3>\n<ul>\n<li>what is new in the python file</li>\n<li>what is new in the JSON file</li>\n</ul>\n<h3 id=\"thepythonfile\">The python file</h3>\n<p>Lets look at the <code>custom_mongo_extension.py</code> file:</p>\n<p>First thing to notice is the connection to the MongoDB database, as well as the call of the method that gathers data for us. Let's look at this one:</p>\n<p><img src=\"assets/get_and_send_data.png\" alt=\"get_and_send_data\" /></p>\n<pre><code class=\"hljs python language-python\">self.mongob_client.db.command(<span class=\"hljs-string\">&quot;serverStatus&quot;</span>)\n</code></pre>\n<p>Here, the extension executes the command to gather data from the database.</p>\n<p>To send this to Dynatrace, we need the <code>send_metric</code> function.</p>\n<p>There are different versions of this, so please check out the <a href=\"https://dynatrace.github.io/plugin-sdk/_apidoc/ruxit.api.html#module-ruxit.api.results_builder\">documentation</a> for further details.</p>\n<h3 id=\"thejsonfile\">The JSON file</h3>\n<p>What is new in the JSON file?</p>\n<p>We can specify properties in the JSON file, like this:</p>\n<pre><code class=\"hljs json language-json\">&quot;properties&quot; : [\n{\n&quot;key&quot; : &quot;port&quot;,\n&quot;type&quot; :  &quot;String&quot;,\n&quot;defaultValue&quot; : &quot;27017&quot;\n},\n{\n&quot;key&quot; : &quot;auth_user&quot;,\n&quot;type&quot; :  &quot;String&quot;,\n&quot;defaultValue&quot; : &quot;******&quot;\n},\n{\n&quot;key&quot; : &quot;auth_password&quot;,\n&quot;type&quot; :  &quot;Password&quot;,\n&quot;defaultValue&quot; : &quot;******&quot;\n},\n{\n&quot;key&quot; : &quot;auth_db&quot;,\n&quot;type&quot;: &quot;String&quot;,\n&quot;defaultValue&quot;:  &quot;&quot;\n}\n]\n</code></pre>\n<p>These attributes can be used in your extension by using :</p>\n<pre><code class=\"hljs python language-python\">self.config.get(<span class=\"hljs-string\">&quot;&lt;attribute_name&gt;&quot;</span>)\n</code></pre>\n<p>If you want to configure these properties after uploading the extension to Dynatrace, you can use the <code>properties</code> attribute in the <code>configUI</code> section:</p>\n<pre><code class=\"hljs json language-json\">&quot;configUI&quot; :{\n&quot;displayName&quot;: &quot;CustomMongoExtension&quot;,\n&quot;properties&quot; : [\n{ &quot;key&quot; : &quot;auth_user&quot;, &quot;displayName&quot;: &quot;User&quot;, &quot;displayOrder&quot;: 1 },\n{ &quot;key&quot; : &quot;auth_password&quot;, &quot;displayName&quot;: &quot;Password&quot;, &quot;displayOrder&quot;: 2 },\n{ &quot;key&quot; : &quot;port&quot;, &quot;displayName&quot;: &quot;Port&quot;, &quot;displayOrder&quot;: 3 },\n{ &quot;key&quot; : &quot;auth_db&quot;, &quot;displayName&quot;: &quot;Authentication Database&quot;, &quot;displayOrder&quot;: 4, &quot;displayHint&quot;: &quot;Leave empty for default&quot; }\n]\n},\n</code></pre>\n<p>By defining this, you are able to specify e.g. a different database user on a specific host, or a different port as well a authentication database if one host is equipped with it.</p>\n<p><img src=\"assets/config-extension.png\" alt=\"config-ui\" />\nIn this case, we can get the user, the password, the port and optionally the authentication database.</p>\n<p>Let's continue by uploading the extension and building it.</p>\n<!-- ------------------------ -->","activityList":[]},{"id":"7","name":"Build, upload and configure","content":"<h2 id=\"builduploadandconfigure\">Build, upload and configure</h2>\n<p>Duration: 00:45:00</p>\n<p>In this step, we will build our extension, upload it and configure it.</p>\n<h3 id=\"build\">Build</h3>\n<p>In order to upload the extension to your environment, you first have to build it.</p>\n<p>Make sure you are in the folder with your <code>.py</code> and <code>.json</code> file.</p>\n<p>Than, run <code>plugin_sdk build_plugin --no_upload</code></p>\n<p>The output will look something like this :</p>\n<pre><code class=\"hljs bash language-bash\">Starting oneagent_build_plugin\nValidating plugin.json against schema\nPlugin data: Plugin name=custom.python.custom_mongo_extension, version=3.0.02\n...\n========================================\nPlugin deployed successfully into /opt/dynatrace/oneagent/plugin_deployment/custom.python.custom_mongo_extension\nPlugin archive available at /opt/dynatrace/oneagent/plugin_deployment/custom.python.custom_mongo_extension.zip\n========================================\n</code></pre>\n<p>This will automatically build the extension and copy the built version to the plugin deployment folder.</p>\n<p>In this tutorial we assume that OneAgent is running on the machine where we develop and build the plugin as well as the monitored technology is running on this host so this step may be skipped.</p>\n<p>In real-life scenarios we assume that the plugin development and building is prepared on a developer's machine and when the plugin is ready it has to be deployed to all production machines or at least the one where monitored technology is running. This is achieved by manual unpacking the built plugin zip file to plugin_deployment directory which is a sub-directory of OneAgent, depending on the operating system, but for is in Linux it is located in <code>/opt/dynatrace/oneagent/plugin_deployment</code></p>\n<p>The <code>.zip</code> that has been generated and is now located in the this folder is what we need to upload to Dynatrace.</p>\n<p>In your environment, go to <strong>Settings / Custom extensions / Upload extension</strong> and upload the <code>.zip</code> folder.</p>\n<p><img src=\"assets/upload-extension.png\" alt=\"upload-extension\" /></p>\n<p>In this case, you have to enter the database credentials in order for the extension to work.\nThis will be indicated yellow.</p>\n<p>You can change these credentials anytime by clicking on <strong>Edit global configuration</strong>.</p>\n<p><img src=\"assets/config-extension.png\" alt=\"config-extension\" /></p>\n<p>After the connection to the database has finished, your hosts will be displayed as <strong>monitored correctly</strong>.</p>\n<!-- ------------------------ -->","activityList":[]},{"id":"8","name":"What's new?","content":"<h2 id=\"whatsnew\">What's new?</h2>\n<p>Duration: 00:15:00</p>\n<h3 id=\"wheretofindthenewmetrics\">Where to find the new metrics</h3>\n<p>So, now that we have installed our extension, we want to see it working.</p>\n<p>To do that, you have to go to <strong>Hosts</strong> and select the one or one of the hosts. Then, select the process that is submitting data, e.g. <strong>MongoDB</strong>.</p>\n<p><img src=\"assets/mongo-process.png\" alt=\"mongo-process\" /></p>\n<p>Now, there is a tab called <strong>MongoDB metrics</strong>, or however you named it in the <code>plugin.json</code></p>\n<p><img src=\"assets/keycharts-group.png\" alt=\"keycharts-group\" /></p>\n<p><img src=\"assets/metrics-tab.png\" alt=\"mongo-tab\" /></p>\n<p>If you click on this tab, there are you custom metrics that your extension gathered:</p>\n<p><img src=\"assets/custom-metrics.png\" alt=\"custom-metrics\" /></p>\n<!-- ------------------------ -->","activityList":[]},{"id":"9","name":"Troubleshooting","content":"<h2 id=\"troubleshooting\">Troubleshooting</h2>\n<p>In this step, we will take a look at what you can do if the extension is not working correctly.</p>\n<h3 id=\"whattodowhensomethingisnotworkingcorrectly\">What to do when something is not working correctly</h3>\n<p>First, check if the name of you python file and the name in the <code>.json</code> file are both correct.</p>\n<p>Another step you should take after deploying the extension on the host is to restart the OneAgent to reload the installed extensions.</p>\n<p>Also, it is advisable to restart the database if the custom metrics are not showing up.</p>\n<p>If still nothing is showing up, you can backup anything that is in the  <code>/opt/dynatrace/oneagent/plugin_deployment</code>, and re-deploy every extension  by itself to make sure they don't conflict each other.\nAgain, restart your OneAgent before re-deploying.</p>\n<p>Another way would be to check the OneAgent logs if there are any <strong>severe</strong> anomalies. To do that, go to the host where you installed the extension and click on the three dots and click on <strong>Run OneAgent diagnostics</strong></p>\n<p><img src=\"assets/oa-logs.png\" alt=\"oa-diagnostics\" /></p>\n<p>There, you can describe the issue you are facing and click on <strong>Start analysis</strong>.</p>\n<p>After a short time, you can clock on <strong>Refresh</strong> and download the folder that contains the logs.\nIn there, go into a folder that located on a path that looks something like this: <strong>SupportArchive824770E5.zip / support_archive / AGENT / bfd1f2189f47fc33 / logs / plugin</strong>.</p>\n<p><img src=\"assets/logs-location.png\" alt=\"logs-location\" /></p>\n<p>Sort by <strong>Date modified</strong> to get the latest log and scroll all the way down to the bottom.</p>","activityList":[]}]