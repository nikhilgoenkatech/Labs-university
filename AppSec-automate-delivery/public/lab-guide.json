[{"id":"1","name":"Introduction","content":"<h2 id=\"introduction\">Introduction</h2>\n<p>Duration: 1</p>\n<p>This lab is the third session of the AIOps Enablement Series. This track focuses on the Automate Delivery, which relates to how you could integate Dynatrace with orchestration tools to create <strong>Progressive Delivery</strong>.</p>\n<p><img src=\"assets/overview-autofeeddelivery.png\" alt=\"Integration-overview\" /></p>\n<p>Throughout these labs, we will be using the <strong>deployment approach</strong> / <strong>strategies</strong> based on the example below.</p>\n<p><img src=\"assets/Intro-sample-deployment-strategies.png\" alt=\"Integration-strategies\" /></p>\n<h3 id=\"whatyoulllearn\">What Youâ€™ll Learn</h3>\n<ul>\n<li>Integrate Jenkins with Dynatrace</li>\n<li>Setup Docker Pipeline in Jenkins</li>\n<li>Leveraging Auto tags Rules for pipelines in Dynatrace</li>\n<li>Creating tags from Build Stages</li>\n<li>Application vulnabilities detection</li>\n</ul>\n<p>Negative\n: As different teams might have their own proprietary test-beds/suits, so we will demo stimulating requests using curl commands too.</p>\n<!-- ------------------------ -->","activityList":[]},{"id":"2","name":"Pre-requisites","content":"<h2 id=\"prerequisites\">Pre-requisites</h2>\n<h3 id=\"runrestartoursamplebankapplication\">Run/Restart our SampleBank application</h3>\n<p>First, stop any samplebank application by running the following commands:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-variable\">$</span> docker stop SampleBankApp\n\n<span class=\"hljs-variable\">$</span> docker <span class=\"hljs-built_in\">rm</span> SampleBankApp\n\n<span class=\"hljs-variable\">$</span> docker network create mynetwork\n</code></pre>\n<p>Now, start the application by running the command as follows:</p>\n<pre><code class=\"hljs\">$ docker <span class=\"hljs-builtin-name\">run</span> -d --name SampleBankApp  -e <span class=\"hljs-attribute\">DT_CUSTOM_PROP</span>=<span class=\"hljs-string\">&#x27;ENVIRONMENT=Test&#x27;</span> -p 4000:3000 nikhilgoenka/sample-bank-app\n</code></pre>\n<p>This would start the docker on port localhost:4000 with docker name as <strong>SampleBankApp</strong>. Connect to your application once so that dynatrace picks up the service by accessing <code>http://AWS-IP:4000</code></p>\n<h3 id=\"jenkinsdocker\">Jenkins docker</h3>\n<p>Now with our application already running, let us now start the jenkins docker:</p>\n<pre><code class=\"hljs\">$ docker run -d --network mynetwork --name Jenkins-Dynatrace -p <span class=\"hljs-number\">8020</span>:<span class=\"hljs-number\">8080</span>  -v <span class=\"hljs-regexp\">/var/</span>jenkins:<span class=\"hljs-regexp\">/var/</span>jenkins_home -v <span class=\"hljs-regexp\">/var/</span>run<span class=\"hljs-regexp\">/docker.sock:/</span>var<span class=\"hljs-regexp\">/run/</span>docker.sock nikhilgoenka/jenkins-security-workshop\n</code></pre>\n<h4 id=\"understadingthecommand\">Understading the command:</h4>\n<ul>\n<li>-d runs the docker in daemon mode.</li>\n<li>-p 8020:8080 - By default, jenkins docker would be running on 8080. Specifying <strong>-p 8020:8080</strong> binds the 8080 in d\nocker to localhost on 8020. So, you can forward/listen requests from docker using <code>localhost:8020</code>.</li>\n<li>-v Bind mounts a volume.\nBy default, jenkins docker is maintaining the pipeline/data information in /var/jenkins<em>home.\nSpecifying <strong>-v /var/jenkins:/var/jenkins</em>home</strong> would mount the localhost:/var/jenkins directory so that the pipeli\nne data is not lost once pipeline is re-started.\nSpecifying <strong>-v /var/run/docker.sock:/var/run/docker.sock</strong> will allow the jekins docker to leverage the dockerd run\nning on localhost. This would be required since we are starting the\nsample-app dockers while running the pipeline.</li>\n</ul>","activityList":[]},{"id":"3","name":"Preconfiguration Setup","content":"<h2 id=\"preconfigurationsetup\">Preconfiguration Setup</h2>\n<h3 id=\"oneagentinstallation\">OneAgent installation</h3>\n<p>In this step, we will deploy the OneAgent to a Linux instance and let the OneAgent discover what is running in that instance.</p>\n<h3 id=\"downloadoneagent\">Download OneAgent</h3>\n<p>Negative\n: Use PuTTy (Windows), PowerShell (Windows) or Terminal (Mac), ssh into the instance (IP address using the your PEM Key)</p>\n<ol>\n<li><p>Open your browser and access the Dynatrace URL.</p></li>\n<li><p>Select <strong>Deploy Dynatrace</strong> from the navigation menu.\n<img src=\"./images/DD.png\" alt=\"Deploy Dynatrace\" /></p></li>\n<li><p>It opens up <strong>Dynatrace Hub</strong> and from there, we will need to select \"Back to Deploy Dynatrace\".\n<img src=\"./images/hub.png\" alt=\"Dynatrace Hub\" /></p></li>\n<li><p>Click the <strong>Start installation</strong> button and select <strong>Linux</strong>.\n<img src=\"./images/Start_install.png\" alt=\"Install\" />\n<img src=\"./images/Linux_install.png\" alt=\"Linux Install\" /></p></li>\n<li><p>Choose the installer type from the drop-down list (we'll use the default x86/64). Use the Linux shell script installer on any Linux system that's supported by Dynatrace, regardless of the packaging system your distribution depends on.</p></li>\n<li><p><strong>Copy</strong> the command provided in the \"Use this command on the target host\" text field. <strong>Paste</strong> the command into your terminal window and execute it.\n<img src=\"./images/Install1.png\" alt=\"Install1\" /></p></li>\n</ol>\n<p>Positive\n: Example\n<img src=\"./images/Example.png\" alt=\"example\" /></p>\n<h3 id=\"executetheinstallationscript\">Execute the installation script</h3>\n<p>(Optional) Once the download is complete, you can verify the signature by copying the command from the <em>\"Verify signature\"</em> text field, then pasting the command into your terminal window and executing it. Make sure your system is up to date, especially SSL and related certificate libraries.</p>\n<p><strong>Copy</strong> the command that's provided in the text box \"And run the installer with root rights\" text field.</p>\n<p><img src=\"./images/Install2.png\" alt=\"Install2\" /></p>\n<p>Paste the command into your terminal window and execute it. You will need to make the script executable before you can run it.</p>\n<p>Note that you will need root access. You can use sudo to run the installation script. To do this, type the following command into the directory where you downloaded the installation script.</p>\n<p>Positive\n: Example\n<img src=\"./images/example1.png\" alt=\"example2\" /></p>\n<h3 id=\"retrivingjenkinspassword\">Retriving Jenkins Password</h3>\n<p>In this step, we will setup the Jenkins pipeline\nThe initial password can be retrieved as</p>\n<pre><code class=\"hljs\">$ cat <span class=\"hljs-regexp\">/var/</span>jenkins<span class=\"hljs-regexp\">/secrets/i</span>nitialAdminPassword\n</code></pre>\n<p><img src=\"assets/preconfig-2.png\" alt=\"preconfig-2\" /></p>\n<p>With the retrieved password, access the Jenkins URL via your web browser.</p>\n<p>Within your Host View, dropdown the <strong>Properties and Tags</strong> and you will get a list of various metadata associated with the host created. Locate the <strong>Public IP Address</strong> and copy its value.\n<img src=\"assets/preconfig-3.png\" alt=\"preconfig-3\" /></p>\n<p>Open up your <strong>web browser</strong> and access the Jenkins URL via <code>http://AWS-PUBLIC-IP:8020</code></p>","activityList":[]},{"id":"4","name":"Setting up Jenkins","content":"<h2 id=\"settingupjenkins\">Setting up Jenkins</h2>\n<h3 id=\"insallingdockerpipelineplugin\">Insalling Docker Pipeline Plugin</h3>\n<p>Once you login, you will see the screen as below. Click on \"Install suggested plugins\" as below:\n<img src=\"assets/jenkins-1.png\" alt=\"setup-Jenkins-1\" />\nFurther, add an admin user with username \"admin\" and password \"dynatrace\"</p>\n<p><img src=\"assets/jenkins-2.png\" alt=\"setup-Jenkins-2\" /></p>\n<ul>\n<li>Click on <strong>Manage Jenkins</strong> on the left menu</li>\n</ul>\n<p><img src=\"assets/jenkins-3.png\" alt=\"setup-Jenkins-3\" /></p>\n<ul>\n<li>Click on <strong>Manage Plugins</strong> as highlighted below:</li>\n</ul>\n<p><img src=\"assets/jenkins-4.png\" alt=\"setup-Jenkins-4\" /></p>\n<p>Now, click on <strong>Available plugins</strong> and input docker in the <strong>search bar</strong></p>\n<ol>\n<li>Select <strong>Docker Pipeline</strong></li>\n<li>Click on <strong>Install without restart</strong></li>\n</ol>\n<p><img src=\"assets/jenkins-5.png\" alt=\"setup-Jenkins-5\" /></p>\n<h3 id=\"configureenvironmentvariables\">Configure Environment Variables</h3>\n<p>Within Jenkins, click on <strong>Manage Jenkins</strong> &gt; <strong>Configure System</strong>\n<img src=\"assets/jenkins-6.png\" alt=\"setup-Jenkins-6\" /></p>\n<ul>\n<li><p>Look for <strong>environment variables</strong> as below:\n<img src=\"assets/jenkins-7.png\" alt=\"setup-Jenkins-7\" /></p></li>\n<li><p>Add the following environment variables:</p></li>\n</ul>\n<ol>\n<li><strong>DOCKERFILE</strong> with value <em>Dockerfile</em></li>\n<li><strong>DT_URL</strong> with value <em>https://mou612.managed-sprint.dynalabs.io/e/{environmentid}</em></li>\n<li><strong>DT_TOKEN</strong> with value as suggested in the next step</li>\n<li><strong>PUBLIC_IP</strong> with the IP address of your AWS instance\n<img src=\"assets/jenkins-8.png\" alt=\"setup-Jenkins-8\" /></li>\n</ol>\n<p>To get your <strong><em>DT_TENANT</em></strong>, go to the Web Browser and extract the URL path as per below.\n<img src=\"assets/jenkins-9.png\" alt=\"setup-Jenkins-9\" /></p>\n<p>To generate your DT_TOKEN, go to Settings &gt; Access Tokens and follow the below:</p>\n<ol>\n<li>Create a token with <strong>LoadTest</strong></li>\n<li>Toggle <strong>Data ingest</strong>, eg: <strong>metrics and events</strong></li>\n<li>Toggle <strong>Create and read synthetic monitors</strong></li>\n<li>Also, toggle <strong>read slo, write slo, problem feed</strong></li>\n<li>Click on <strong>Generate</strong></li>\n<li>Clck on <strong>Copy</strong>\n<img src=\"assets/DT_TOKEN_Screenshot.png\" alt=\"setup-Jenkins-10\" /></li>\n</ol>\n<h3 id=\"configurejenkinspipeline\">Configure Jenkins Pipeline</h3>\n<ul>\n<li>Click on \"New Item\" on the left side:</li>\n</ul>\n<p><img src=\"assets/jenkins-11.png\" alt=\"setup-Jenkins-11\" /></p>\n<ul>\n<li>Add a pipeline as per below:</li>\n<li>Item name - <strong><em>My Pipeline</em></strong></li>\n<li>Choose <strong>Pipeline</strong></li>\n<li>Click on <strong>OK</strong></li>\n</ul>\n<p><img src=\"assets/jenkins-12.png\" alt=\"setup-Jenkins-12\" /></p>\n<ul>\n<li>Use the pipeline definitions as per below:</li>\n<li>Definition - Dropdown <strong>Pipeline script from SCM</strong></li>\n<li>SCM - Dropdown <strong>Git</strong></li>\n<li>Repository URL - <strong><em>https://github.com/nikhilgoenkatech/JenkinsBankApp/</em></strong></li>\n<li>Click on <strong>OK</strong></li>\n</ul>\n<p><img src=\"assets/jenkins-13.png\" alt=\"setup-Jenkins-13\" /></p>","activityList":[]},{"id":"5","name":"Configure Dynatrace for integration with Jenkins","content":"<h2 id=\"configuredynatraceforintegrationwithjenkins\">Configure Dynatrace for integration with Jenkins</h2>\n<p>In this step, we will setup tagging rules to integrate Jenkins and Dynatrace. The tags will additionally help to limit the Jenkins events to the particular set of entities.</p>\n<h3 id=\"enablesecurityvulnerabilitydetection\">Enable Security Vulnerability detection</h3>\n<p>Within Dynatrace, on the left menu go to <strong>Settings > Application Security > \"Runtime vulnerability detection\"</strong> and toggle <strong>Enable runtime vulnerability detection</strong>\n<img src=\"assets/enableSecurity.png\" alt=\"Enablesecurity\" /></p>\n<h3 id=\"creatingautotags\">Creating Auto Tags</h3>\n<p>Within Dynatrace, on the left menu go to Settings &gt; Tags &gt; Automatically applied tags</p>\n<p>Use the following:</p>\n<ul>\n<li>Tag name - <code>JenkinInstance</code></li>\n<li>Optional Tag value - <code>{Ec2Instance:SecurityGroup}</code></li>\n<li>Conditions -</li>\n<li>Dropdown <strong>AWS Security Group</strong></li>\n<li>Dropdown <strong>contains</strong></li>\n<li><strong><em>Group</em></strong></li>\n<li><strong>Check</strong> Case sensitive</li>\n<li>Click on <strong>Save</strong></li>\n</ul>\n<p><img src=\"assets/autotagJenkins-1.png\" alt=\"autotag-Jenkins-1\" /></p>\n<p>Within the Host Properties and tags, <strong>JenkinsInstance tag</strong> will be added</p>\n<p><img src=\"assets/autotagJenkins-2.png\" alt=\"autotag-Jenkins-2\" /></p>\n<h3 id=\"creatingtagsforbuildstages\">Creating Tags for Build Stages</h3>\n<p>Use the following:</p>\n<ul>\n<li>Tag name - <code>DockerService</code></li>\n<li>Rule applies to - Dropdown <strong>Services</strong></li>\n<li>Optional Tag value - <code>{ProcessGroup:DetectedName}</code></li>\n<li>Conditions -</li>\n<li>Dropdown <strong>Docker container name</strong></li>\n<li>Dropdown <strong>exists</strong></li>\n<li>Click on <strong>Save</strong>\n<img src=\"assets/autotagJenkins-3.png\" alt=\"autotag-Jenkins-3\" /></li>\n</ul>\n<p>Use the following:</p>\n<ul>\n<li>Tag name - <code>Environment</code></li>\n<li>Rule applies to - Dropdown <strong>Services</strong></li>\n<li>Optional Tag value - <code>{ProcessGroup:Environment:ENVIRONMENT}</code></li>\n<li>Conditions -</li>\n<li>Dropdown <strong>Custom Metadata</strong></li>\n<li>Dropdown <strong>Key Source >> Environment</strong> &gt;&gt; <strong>Dynamic Key  >> ENVIRONMENT</strong> &gt;&gt; <strong>Operator >> exists</strong></li>\n<li>Click on <strong>Save</strong></li>\n</ul>\n<p><img src=\"assets/autotagJenkins-4.png\" alt=\"autotag-Jenkins-4\" /></p>","activityList":[]},{"id":"6","name":"Jenkins Build","content":"<h2 id=\"jenkinsbuild\">Jenkins Build</h2>\n<p>In this step, we will trigger Jenkins Pipeline to create a build.</p>\n<h3 id=\"triggeranewjenkinsbuild\">Trigger a new Jenkins-build</h3>\n<p>Now as we have completed pre-requisities, we will trigger the build. To do so, within Jenkins, navigate to <strong>Homepage</strong> and click on <strong>Build Now</strong> as seen below\n<img src=\"assets/Jenkinsbuild-6.png\" alt=\"Jenkins-Build-6\" /></p>\n<!-- ----------------------- -->\n<h3 id=\"decodingstepsineachstage\">Decoding steps in each stage</h3>\n<p>In Jenkins, Click on <strong>individual stages > Logs</strong> to view details involved in that step.\n<img src=\"assets/decodestep-1.png\" alt=\"decoding-step-1\" /></p>\n<h3 id=\"understandingthetagsinmoredetail\">Understanding the tags in more detail</h3>\n<p>Referring to the Jenkins File, the following code handles the <strong>pushing of Jenkins deployment information</strong> into Dynatrace.</p>\n<pre><code class=\"hljs bash language-bash\">dir (<span class=\"hljs-string\">&#x27;dynatrace-scripts&#x27;</span>) {\n// push a deployment event on the host with the tag JenkinsInstance created using automatic tagging rule\nsh <span class=\"hljs-string\">&#x27;./pushdeployment.sh HOST CONTEXTLESS JenkinsInstance ACM_Security_Group &#x27;</span> +\n<span class=\"hljs-string\">&#x27;${BUILD_TAG} ${BUILD_NUMBER} ${JOB_NAME} &#x27;</span> +\n<span class=\"hljs-string\">&#x27;Jenkins ${JENKINS_URL} ${JOB_URL} ${BUILD_URL} ${GIT_COMMIT}&#x27;</span>\n</code></pre>\n<p><img src=\"assets/decodestep-2.png\" alt=\"decoding-step-2\" />\nReferring to the Jenkins File, the following code handles the <strong>pushing of deployment information</strong> into Dynatrace. This step utilizes environment varibles such as <strong><em>DT<em>CLUSTER</em>ID</em></strong>, <strong><em>DT<em>TAGS</em></strong> and <strong><em>DT</em>CUSTOM_PROP</em></strong></p>\n<pre><code class=\"hljs bash language-bash\">stage(<span class=\"hljs-string\">&#x27;DeployStaging&#x27;</span>) {\n// Lets deploy the previously build container\ndef app = docker.image(<span class=\"hljs-string\">&quot;sample-bankapp-service:<span class=\"hljs-variable\">${BUILD_NUMBER}</span>&quot;</span>)\napp.run(<span class=\"hljs-string\">&quot;--network mynetwork --name SampleOnlineBankStaging -p 3000:3000 &quot;</span> +\n<span class=\"hljs-string\">&quot;-e &#x27;DT_CLUSTER_ID=SampleOnlineBankStaging&#x27; &quot;</span> +\n<span class=\"hljs-string\">&quot;-e &#x27;DT_TAGS=Environment=Staging Service=Sample-NodeJs-Service&#x27; &quot;</span> +\n<span class=\"hljs-string\">&quot;-e &#x27;DT_CUSTOM_PROP=ENVIRONMENT=Staging JOB_NAME=<span class=\"hljs-variable\">${JOB_NAME}</span> &quot;</span> +\n<span class=\"hljs-string\">&quot;BUILD_TAG=<span class=\"hljs-variable\">${BUILD_TAG}</span> BUILD_NUMBER=<span class=\"hljs-variable\">${BUILD_NUMBER}</span>&#x27;&quot;</span>)\n</code></pre>\n<p><img src=\"assets/decodestep-3.png\" alt=\"decoding-step-3\" /></p>\n<h3 id=\"reviewchangesindynatrace\">Review changes in Dynatrace</h3>\n<p>You can see the changes reflected in <strong>SampleOnlineBankStaging Process View</strong>\n<img src=\"assets/decodestep-4.png\" alt=\"decoding-step-4\" />\nYou also can see the changes reflected in <strong>node-bank2 Service View</strong></p>\n<p><img src=\"assets/decodestep-5.png\" alt=\"decoding-step-5\" /></p>\n<h3 id=\"automatecontinuousfeedbackfromdynatrace\">Automate/Continuous Feedback from Dynatrace</h3>\n<pre><code class=\"hljs bash language-bash\">stage(<span class=\"hljs-string\">&#x27;Testing&#x27;</span>) {\n// lets push an event to dynatrace that indicates that we START a load <span class=\"hljs-built_in\">test</span>\ndir (<span class=\"hljs-string\">&#x27;dynatrace-scripts&#x27;</span>) {\nsh <span class=\"hljs-string\">&#x27;./pushevent.sh SERVICE CONTEXTLESS DockerService SampleOnlineBankStaging &#x27;</span> +\n<span class=\"hljs-string\">&#x27;&quot;STARTING Load Test&quot; ${JOB_NAME} &quot;Starting a Load Test as part of the Testing stage&quot;&#x27;</span> +\n<span class=\"hljs-string\">&#x27; ${JENKINS_URL} ${JOB_URL} ${BUILD_URL} ${GIT_COMMIT}&#x27;</span>\n}\n\n// lets run some <span class=\"hljs-built_in\">test</span> scripts\ndir (<span class=\"hljs-string\">&#x27;sample-bank-app-service-tests&#x27;</span>) {\n// start load <span class=\"hljs-built_in\">test</span> - simulating traffic <span class=\"hljs-keyword\">for</span> Staging enviornment on port 3000\n\nsh <span class=\"hljs-string\">&quot;rm -f stagingloadtest.log stagingloadtestcontrol.txt&quot;</span>\nsh <span class=\"hljs-string\">&quot;python3 smoke-test.py 3000 200 <span class=\"hljs-variable\">${BUILD_NUMBER}</span> stagingloadtest.log <span class=\"hljs-variable\">${PUBLIC_IP}</span> SampleOnlineBankStaging&quot;</span>\narchiveArtifacts artifacts: <span class=\"hljs-string\">&#x27;stagingloadtest.log&#x27;</span>, fingerprint: <span class=\"hljs-literal\">true</span>\n}\n\n// lets push an event to dynatrace that indicates that we STOP a load <span class=\"hljs-built_in\">test</span>\ndir (<span class=\"hljs-string\">&#x27;dynatrace-scripts&#x27;</span>) {\nsh <span class=\"hljs-string\">&#x27;./pushevent.sh SERVICE CONTEXTLESS DockerService SampleOnlineBankStaging &#x27;</span>+\n<span class=\"hljs-string\">&#x27;&quot;STOPPING Load Test&quot; ${JOB_NAME} &quot;Stopping a Load Test as part of the Testing stage&quot; &#x27;</span>+\n<span class=\"hljs-string\">&#x27;${JENKINS_URL} ${JOB_URL} ${BUILD_URL} ${GIT_COMMIT}&#x27;</span>\n}\n</code></pre>\n<p><img src=\"assets/decodestep-6.png\" alt=\"decoding-step-6\" />\n<img src=\"assets/decodestep-7.png\" alt=\"decoding-step-7\" />\nPositive\n:Davis would ingest and analyse the data which would further help in identifying probable root-cause and thereby, helping the backend teams to a quicker resolution.</p>\n<h3 id=\"buildfailure\">Build failure</h3>\n<p>After the load test, Dynatrace would check for any problems be it vulnerability or related to services health. Should there be an issue, the build would fail.</p>\n<p><img src=\"assets/security.gif\" alt=\"security\" /></p>\n<p>We will leverage API to fetch the vulnerabilities and depending on the outcome of the API call, we will proceed with the build.</p>\n<pre><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-title\">stage</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&#x27;ValidateStaging&#x27;</span>)</span></span> {\ndir (<span class=\"hljs-string\">&#x27;dynatrace-scripts&#x27;</span>) {\ntry {\n<span class=\"hljs-comment\">// Check if there are vulnerabilities identified by DT</span>\nDYNATRACE_SEC_PROBLEM_COUNT = <span class=\"hljs-number\">0</span>\nDYNATRACE_SEC_PROBLEM_COUNT = sh <span class=\"hljs-string\">&#x27;python3 checkforvulnerability.py ${DT_URL} ${DT_TOKEN} [Environment]Environment:Staging 7.5&#x27;</span>\n} catch (Exception e) {\n<span class=\"hljs-keyword\">if</span> (DYNATRACE_SEC_PROBLEM_COUNT) {\necho <span class=\"hljs-string\">&quot;Here I am.. &quot;</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">error</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;Dynatrace identified some vulnerabilities. ABORTING the build!!&quot;</span>)</span></span>\ncurrentBuild<span class=\"hljs-selector-class\">.result</span> = <span class=\"hljs-string\">&#x27;ABORTED&#x27;</span>\nsh <span class=\"hljs-string\">&quot;exit ${DYNATRACE_SEC_PROBLEM_COUNT}&quot;</span>\n}\necho <span class=\"hljs-string\">&quot;In here&quot;</span>\n}\narchiveArtifacts artifacts: <span class=\"hljs-string\">&#x27;securityVulnerabilityReport.txt&#x27;</span>, fingerprint: true\n</code></pre>\n<p>In this case, Dynatrace highlights critical vulnerabilities with one of the services 'node-bank'. It helps to drill down there is a particular library <code>lodash</code> which has vulnerability and is affecting 3 processes, thereby, aborting the build.\n<img src=\"assets/appsecbuildFail.png\" alt=\"Jenkins-Build-7\" />\n<img src=\"assets/vulnerabilityDetails.png\" alt=\"Jenkins-Build-8\" /></p>\n<p>Now to identify the fix, we will use davisSecurityAdvisor API. This API would help identify the root-cause and the fix for a vulnerability.\n<img src=\"assets/davisSecurityAdvisor.png\" alt=\"Jenkins-Davis-Security-Advisor\" /></p>\n<p>So, let us upgrade the affected libraries and re-build our docker. In our case, we will use another Dockerfile that upgrades two of the affected libraries <code>lodash</code> and <code>nodejs</code>.\n<img src=\"assets/updatedDocker.png\" alt=\"Jenkins-Build-20\" /></p>\n<p>In order our pipeline build the docker using the modified Dockerfile, let us modify <strong>environment variables</strong> within Jenkins by navigating to <strong>Manage Jenkins</strong> &gt; <strong>Configure System</strong>\nVariable Name: <strong>DOCKERFILE</strong>\nValue: <strong>fixedvulnerability_Dockerfile</strong>\n<img src=\"assets/dockerfileEnv.png\" alt=\"Jenkins-Build-21\" /></p>\n<p>From Jenkins, now we can <strong>trigger the build</strong> again.\n<img src=\"assets/Jenkinsbuild-11.png\" alt=\"Jenkins-Build-11\" /></p>\n<h3 id=\"dashboardcreation\">Dashboard creation</h3>\n<p>Leveraging the dashboard API, a dashboard is generated with information of the <strong>health metrics</strong>, <strong>SLOs</strong>, <strong>Security Vulnerability</strong> of <strong>hosts/services/requests</strong> invoked during Jenkins pipeline. These can be used to give a quick sneak peek of any issues to the operation/devOps team.</p>\n<pre><code class=\"hljs bash language-bash\">// Create a sample dashboard <span class=\"hljs-keyword\">for</span> the Application Security Automation.\nsh <span class=\"hljs-string\">&#x27;./create-dashboard.sh Staging &#x27;</span>+  <span class=\"hljs-string\">&#x27;${JOB_NAME} ${BUILD_NUMBER}&#x27;</span>\n</code></pre>\n<p><img src=\"assets/dashboard.png\" alt=\"decoding-step-9\" /></p>\n<p>Similarly, during the build process we spun a synthetic monitor that will monitor the availability and performance of the deployed applications as experienced by different customers around the world and around the clock.</p>\n<pre><code class=\"hljs bash language-bash\">// Create a sample synthetic monitor so as to check the UI functionality\nsh <span class=\"hljs-string\">&#x27;./synthetic-monitor.sh Staging &#x27;</span>+  <span class=\"hljs-string\">&#x27;${JOB_NAME} ${BUILD_NUMBER}&#x27;</span> + <span class=\"hljs-string\">&#x27; 3000&#x27;</span>\n</code></pre>\n<p><img src=\"assets/syntheticmonitor.png\" alt=\"decoding-step-9\" /></p>\n<!-- ----------------------- -->","activityList":[]},{"id":"7","name":"References","content":"<h2 id=\"references\">References</h2>","activityList":[]}]