[{"id":"1","name":"Session Objectives","content":"<h2 id=\"sessionobjectives\">Session Objectives</h2>\n<p>This lab focuses on ingesting metrics through Telegraf agent. For demo purpose, we used an SNMP agent simulator to simulate a SNMP metric to be captured by Telegraf agent and then ingesting that SNMP metric to Dynatrace.</p>\n<ul>\n<li>Installing the OneAgent on the host</li>\n<li>Configuring Telegraf</li>\n<li>Running SNMP agent simulator</li>\n<li>Finding Telegraf metrics in Dynatrace</li>\n<li>Visualise new Telegraf metrics in Dynatrace</li>\n<li>Reading new SNMP metric in Dynatrace</li>\n<li>Setting up custom alerts on SNMP metric</li>\n<li>Triggering an alert to see how Davis AI reads, populates baseline for the SNMP metric</li>\n</ul>","activityList":[]},{"id":"2","name":"Pre-requisites","content":"<h2 id=\"prerequisites\">Pre-requisites</h2>\n<p>In this step, we will start the application, install oneAgent and monitor how various components of application is being picked in Dynatrace and configure our tenant to ingest telegraf metrics.</p>","activityList":[]},{"id":"3","name":"Telegraf configuration with OneAgent","content":"<h2 id=\"telegrafconfigurationwithoneagent\">Telegraf configuration with OneAgent</h2>\n<p>In this step, we will install oneagent and enable telegraf configuration to start reporting metrics to Dynatrace.</p>\n<h3 id=\"oneagentinstallation\">OneAgent Installation</h3>\n<p>Connect to your AWS instance with the following credentials</p>\n<ul>\n<li>Username: <strong>d1pacmworkshop</strong></li>\n<li>Password: <strong>dynatrace</strong></li>\n</ul>\n<p>Now become the root user by issuing</p>\n<pre><code class=\"hljs\"><span class=\"hljs-variable\">$ </span>sudo su\n</code></pre>\n<p><em>Hint</em>: Password for root is <em>dynatrace</em></p>\n<p>If you have installed oneagent in the previous lab, skip this step and move to the next step.</p>\n<p>If not, we will install OneAgent in our host (EC2 Instance), please follow the steps below:</p>\n<ol>\n<li>Within Dynatrace, please navigate to <strong>Deploy Dynatrace</strong></li>\n<li>Click on <strong>Start installation</strong></li>\n<li>Click on <strong>Linux</strong></li>\n<li>Click on <strong>Create token</strong> to generate a PaaS token or we can use a token if we have saved it previously.</li>\n<li><strong>Copy</strong> the command provided in the \"Download the installer using this command on the target host\" text field. <strong>Paste</strong> the command into your terminal window and execute it.</li>\n<li>(Optional) Once the download is complete, you can verify the signature by copying the command from the <em>\"Verify signature\"</em> text field, then pasting the command into your terminal window and executing it. Make sure your system is up to date, especially SSL and related certificate libraries.</li>\n<li><strong>Copy</strong> the command from \"Run the installer with root rights\" text field.</li>\n</ol>\n<p><img src=\"./images/OneAgent_OS.png\" alt=\"image\" />\n<img src=\"./images/Download_OneAgent.png\" alt=\"image\" /></p>\n<blockquote>\n  <p>Negative\n  : If you have oneagent installed already, you can skip the above step.</p>\n</blockquote>\n<h3 id=\"tenantconfiguration\">Tenant configuration</h3>\n<p>Within your tenant, navigate to <strong>Settings > Monitoring > Monitoring technologies > Dynatrace OneAgent StatsD, Pipe, HTTP Metric API</strong> and toggle \"Enable Extension Execution Controller on every host\" and \"Enable local Pipe/HTTP metric API on every host\" so that oneagent can make API calls to push the telegraf metrics to the tenant.</p>\n<p><img src=\"./images/Extension_Execution.png\" alt=\"image\" /></p>\n<h3 id=\"telegrafconfiguration\">Telegraf Configuration</h3>\n<p>Please use the following steps to configure Telegraf configuration file</p>\n<ol>\n<li>Open Telegraf configuration file under</li>\n</ol>\n<pre><code class=\"hljs bash language-bash\">$ sudo vim /etc/telegraf/telegraf.conf\n</code></pre>\n<ol start=\"2\">\n<li>Please uncomment below tags under telegraf.conf (remove '##')</li>\n</ol>\n<ul>\n<li>Uncomment [[outputs.dynatrace]]</li>\n<li>Uncomment prefix = \"telegraf.\"</li>\n</ul>\n<p><img src=\"./images/telegraf_configuration_with_oneagent.png\" alt=\"image\" /></p>\n<ol start=\"3\">\n<li>Please save the changes, please restart telegraf service for the changes to take effect. To do so, please run below command</li>\n</ol>\n<pre><code class=\"hljs bash language-bash\">$ service telegraf restart\n</code></pre>","activityList":[]},{"id":"4","name":"Why use Telegraf with Dynatrace?","content":"<h2 id=\"whyusetelegrafwithdynatrace\">Why use Telegraf with Dynatrace?</h2>\n<p>In this step, we will enable the 3rd party technology to ingest metrics from Telegraf into Dynatrace.</p>\n<p>By adding Dynatrace support to Telegraf, one can now get intelligent observability and automatic root cause analysis into technologies where oneAgent cannot be installed for example, a network component.  The network component is still widely monitored using SNMP, so let us enable telegraf to collect SNMP metrics and with telegraf pushing the metrics to Dynatrace, it will help you to start monitoring the network with Dynatrace.</p>\n<p>Before we configure the SNMP, let us quickly look into some basics of SNMP.</p>","activityList":[]},{"id":"5","name":"SNMP Architecture","content":"<h2 id=\"snmparchitecture\">SNMP Architecture</h2>\n<h3 id=\"snmpconcepts\">SNMP Concepts:</h3>\n<p>SNMP stands for <strong>S</strong>imple <strong>N</strong>etwork <strong>M</strong>anagement <strong>P</strong>rotocol and has been in use since 1988. It is used to configure/manage/monitor network components remotely and the SNMP Architecture looks like the below:\n<img src=\"./images/snmp-architecture.png\" alt=\"image\" /></p>\n<p>Let us jump into the runtime components of SNMP:</p>\n<ol>\n<li><strong>SNMP managed device and resources</strong>:\nThese are the devices on which SNMP is running and that are managed using SNMP. Whilst SNMP was initially developed to be used for switches/routers that cannot run a standard Operating System, it has now been extended to several other components (quite recently <strong>I</strong>nternet <strong>o</strong>f <strong>T</strong>hings). For our use-case, we will simulate a SNMP device on the AWS instance which will be our managed device. To start the managed device, navigate to <strong>/home/ubuntu/extendDynatrace/telegraf/examples/</strong> and run the SNMP simulator as below:</li>\n</ol>\n<pre><code class=\"hljs bash language-bash\">$ <span class=\"hljs-built_in\">cd</span> /home/ubuntu/extendDynatrace/telegraf/examples/\n\n$ sudo ./run_simple_agent_over_tcpsocket.sh\n</code></pre>\n<blockquote>\n  <p>Negative\n  : This will start the agent on port :5555 and can respond to any queries made by the SNMP manager. Open another window in our terminal to run further commands.</p>\n</blockquote>\n<ol start=\"2\">\n<li><strong>SNMP Manager</strong>:\nThe SNMP manager is a system that controls and monitors the activities of network hosts using SNMP. They can query different SNMP devices using SNMP messages to get details of the health of devices and have the ability to control these devices by sending configuration SNMP messages. In our use-case, our telegraf would be the SNMP manager that would manage the device by querying the agent. To verify if the SNMP manager is running on your instance, execute the below command:</li>\n</ol>\n<pre><code class=\"hljs bash language-bash\">$ service telegraf status\n</code></pre>\n<p><img src=\"./images/running-telegraf.png\" alt=\"image\" /></p>\n<ol start=\"3\">\n<li><strong>SNMP agent</strong>:\nSNMP agents are the agents that respond to SNMP manager by sending the values of the requested devices to the SNMP manager. In our case, snmpd will act as agent and respond to SNMP manager which is running on the same instance. To view our SNMP agent that would respond to the SNMP manager (telegraf), run the below command:</li>\n</ol>\n<pre><code class=\"hljs bash language-bash\">$ service snmpd status\n</code></pre>\n<p><img src=\"./images/running-snmpd.png\" alt=\"image\" /></p>\n<ol start=\"4\">\n<li><p><strong>OID (Object Identifiers)</strong>:\nOID is a bunch of numbers separated by dots that are assigned by SNMP in order to determine an object uniquely on a device (similar to say \"IP address\").\nSo, for example, power-on or power-off button on your TV or IoT would be assigned an OID (like 1.3.6.1.2.1.2.2.1.8) by SNMP, so whenever it refers 1.3.6.1.2.1.2.2.1.8, it is referring to the power button.</p></li>\n<li><p><strong>MIB (Management Information Base)</strong>:\nMIBs is word-based translated OIDs to make it human readable. So, in the above example, a MIB for the same OID could be something like \"SAMSUNG-SYSTEM-MIB::power.0\". So, in essence a MIB and OID would have one-to-one mapping.</p></li>\n</ol>\n<p>Both MIBs and OIDs are stored physically on the device that is being monitored and are defined by the manufacturer. Often the MIBs are available online and is easily accessible on manufacturer website. In our case, we have the MIBs of our simulator stored at /usr/share/snmp/mibs/ with name <strong>SIMPLE-MIB.txt</strong>.</p>\n<ol start=\"6\">\n<li><strong>SNMP Message Types/Commands</strong>:\nSNMP tools perform many functions that can be a mix of push configuration or pull information from the underlying SNMP agents. The following two commands describe the commands that SNMP manager understands and which we will use during our session:</li>\n</ol>\n<p>6.1: <strong>Get Request (snmpwalk)</strong>: A request to retrieve the value of a variable or list of variables. When SNMP manager initiates a snmpwalk, SNMP agent responds back with value of all the requested variable. SNMP Manager can either send request for a single variable or multiple variables in a single request.</p>\n<p>Let us now use our pre-populated variable present in our MIBs file and retrieve its value by issuing a snmpwalk command. You can check the value by running 'snmpwalk' as below,</p>\n<pre><code class=\"hljs bash language-bash\">$ snmpwalk -v 2c -c simple -M+. localhost:5555 SIMPLE-MIB::simpleInteger.0\n</code></pre>\n<p><img src=\"./images/snmpwalk_0.png\" alt=\"image\" /></p>\n<p>6.2 <strong>Set Request—Sent (snmpset)</strong>: These are the commands sent by SNMP manager to the agent to set a particular value for a variable.\nNow, let us set a new value for the variable we ran snmpwalk on so we can simulate a real scenario. To do so, please open a new shell and run below command to set a new value for SIMPLE-MIB::simpleInteger.0</p>\n<pre><code class=\"hljs bash language-bash\">$ snmpset -v 2c -c simple -M+. localhost:5555 SIMPLE-MIB::simpleInteger.0 i 20\n</code></pre>\n<p><img src=\"./images/simulator-set-value.png\" alt=\"image\" /></p>\n<p>If we can now run 'snmpwalk' to check SIMPLE-MIB::simpleInteger.0 value, we will see the new value reflected as below:\n<img src=\"./images/snmpwalk_20.png\" alt=\"image\" /></p>","activityList":[]},{"id":"6","name":"Configure Telegraf to retrieve the metrics","content":"<h2 id=\"configuretelegraftoretrievethemetrics\">Configure Telegraf to retrieve the metrics</h2>\n<p>In this step, we will configure telegraf.conf file to start retrieving metrics from the SNMP simulator.</p>\n<p>In order to retrieve metrics, please make the changes below in <strong>/etc/telegraf/telegraf.conf</strong> so that we can enable SNMP in Telegraf:</p>\n<pre><code class=\"hljs bash language-bash\">$ sudo vim /etc/telegraf/telegraf.conf\n</code></pre>\n<ul>\n<li>Uncomment [[inputs.snmp]]</li>\n<li>Add agents = [\"udp://127.0.0.1:5555\"]</li>\n<li>Add below lines for metric</li>\n</ul>\n<pre><code class=\"hljs json language-json\">[[inputs.snmp.field]]\noid = &quot;SIMPLE-MIB::simpleInteger.0&quot;\nname = &quot;router.load&quot;\n</code></pre>\n<p><img src=\"./images/telegraf-snmp-enabled.png\" alt=\"image\" /></p>\n<p>Please save the changes and restart telegraf service for the changes to take effect. To do so, run below command</p>\n<pre><code class=\"hljs bash language-bash\">$ sudo service telegraf restart\n</code></pre>","activityList":[]},{"id":"7","name":"Metrics","content":"<h2 id=\"metrics\">Metrics</h2>\n<p>In this step, we will identify the metrics in Dynatrace that are being pushed by telegraf.</p>\n<p>As we have injected Telegraf via OneAgent, we will be able to see metrics for it. Within your Dynatrace environment, navigate to <strong>Metrics</strong> and search for metrics with \"telegraf\" prefix in the filter section:\n<img src=\"./images/Dynatrace-metric.png\" alt=\"image\" /></p>\n<p>Please click on details for one of the metrics so see further information:\n<img src=\"./images/Metrics.png\" alt=\"image\" /></p>\n<p>Within Dynatrace, please naviagte to <strong>Explorer Data</strong>, search for <em>telegraf.snmnp.router.load</em> (this metric was not nativgely captured by oneAgent but after configuring Telegraf, we are able to see it) and we will be able to create this metric below:\n<img src=\"./images/Data-explorer-SNMP.png\" alt=\"image\" /></p>","activityList":[]},{"id":"8","name":"Why push metrics?","content":"<h2 id=\"whypushmetrics\">Why push metrics?</h2>\n<p>In this step, we will walk through the automatic baseline and uses of pushing telegraf metrics into Dynatrace. We will setup a synthetic browser in order to populate automatic baseline.  Once the metrics are being pushed in Dynatrace, DAVIS AI engine would start digesting the information and identifying the baseline for these metrics. You can setup custom alerts (with auto-detective baseline) so that whenever Dynatrace DAVIS engine deems to be an issue, it will fire an alert.</p>\n<p>To do so, we can define a custom event in Dynatrace so that it can start baselining our new metric (<em>telegraf.snmnp.router.load</em>) and get an alert when the baseline threshold is breached. Please follow the steps below:</p>\n<p>:bulb: For baselining, we will eventually need a week's worth of data to be generated but for this session, we can run it for 20 minutes so that we can test our threshold.</p>\n<ol>\n<li><p>We will navigate to <strong>Settings > Anomaly detection > Custom events for alerting</strong></p></li>\n<li><p>Click on <strong>Create custom event for alerting</strong></p></li>\n<li><p>Select Category as <em>telegraf</em> and select Metric as <em>telegraf.snmnp.router.load</em></p></li>\n<li><p>Select Aggregation as <em>Average</em>\n<img src=\"./images/Telegraf-custom-event.png\" alt=\"image\" /></p></li>\n<li><p>Select 'Monitoring strategy' as <strong>Auto-adaptive baseline</strong></p></li>\n<li><p>Under <em>Alert Preview</em>, we should be able to see data for that metric.\n<img src=\"./images/Telegraf-custom-event2.png\" alt=\"image\" /></p></li>\n<li><p>We will provide \"Router load is high\" in the <em>Title</em> and select <em>severity</em> as \"Custom alert\".\n<img src=\"./images/Event_description.png\" alt=\"image\" /></p></li>\n</ol>\n<p>Now, we will change the value for SIMPLE-MIB::simpleInteger and will set a new value for the metric so that it breaches the threshold and generates a problem in Dynatrace. Please go to your instance and run this command below:</p>\n<pre><code class=\"hljs bash language-bash\">$ snmpset -v 2c -c simple -M+. localhost:5555 SIMPLE-MIB::simpleInteger.0 i 300\n</code></pre>\n<p>Within Dynatrace, navigate to <strong>Problems</strong> and we will be able to see a custom problem:\n<img src=\"./images/SNMP-problem.png\" alt=\"image\" /></p>","activityList":[]},{"id":"9","name":"Telegraf configuration without OneAgent","content":"<h2 id=\"telegrafconfigurationwithoutoneagent\">Telegraf configuration without OneAgent</h2>\n<p>There might be instances that you cannot deploy oneagent on the host to monitor the health of the host or have full-stack monitoring due to limited host units. For those instances, you can configure Telegraf without oneAgent. Please follow  the steps below to configure Telegraf without OneAgent:</p>\n<ol>\n<li><p>Within Dynatrace, navigate to Settings &gt; Integration &gt; Dynatrace API and create a token with \"Ingest metrics\" enabled,\n<img src=\"./images/Token.png\" alt=\"image\" /></p></li>\n<li><p>Open telegraf.conf file with this comment below:</p></li>\n</ol>\n<pre><code class=\"hljs\">$ sudo nano <span class=\"hljs-regexp\">/etc/</span>telegraf/telegraf.conf\n</code></pre>\n<ol start=\"3\">\n<li>Uncomment below tags and add the appropriate values in telegraf.conf.</li>\n</ol>\n<ul>\n<li>Uncomment [[outputs.dynatrace]]</li>\n<li>Uncomment api_token = \"abcdefjhij1234567890\"</li>\n<li>Uncomment url = \"https://{your-environment-id}.live.dynatrace.com/api/v2/metrics/ingest\"</li>\n</ul>\n<p><img src=\"./images/telegraf_configuration.png\" alt=\"image\" /></p>","activityList":[]}]